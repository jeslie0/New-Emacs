#+Title: James' Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ./init.el :results none
#+options: toc:t
#+attr_html: :width 300px
[[file:Icons/EmacsLogo.svg]]
* DONE early-init.el
#+BEGIN_SRC elisp :tangle ./early-init.el
;;; early-init.el -*- lexical-binding: t; -*-

;; We use straight.el for packages, hence we don't want to initialise
;; package.el.
(setq package-enable-at-startup nil)

;; This makes newer versions of files be prioritised over older
;; ones. Makes newer non-compiled files be used rather than older
;; compiled ones.
(setq load-prefer-newer t)

;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, then reset it later by
;; enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.
(setq gc-cons-threshold most-positive-fixnum)

(unless (or (daemonp)
            noninteractive
            init-file-debug)
  (let ((old-file-name-handler-alist file-name-handler-alist))
    ;; `file-name-handler-alist' is consulted on each `require', `load' and
    ;; various path/io functions. You get a minor speed up by unsetting this.
    ;; Some warning, however: this could cause problems on builds of Emacs where
    ;; its site lisp files aren't byte-compiled and we're forced to load the
    ;; *.el.gz files (e.g. on Alpine).
    (setq-default file-name-handler-alist nil)
    ;; ...but restore `file-name-handler-alist' later, because it is needed for
    ;; handling encrypted or compressed files, among other things.
    (defun doom-reset-file-handler-alist-h ()
      (setq file-name-handler-alist
            ;; Merge instead of overwrite because there may have bene changes to
            ;; `file-name-handler-alist' since startup we want to preserve.
            (delete-dups (append file-name-handler-alist
                                 old-file-name-handler-alist))))
    (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h 101))

 ;; Premature redisplays can substantially affect startup times and produce
  ;; ugly flashes of unstyled Emacs.
  (setq-default inhibit-redisplay t
                inhibit-message t)
  (add-hook 'window-setup-hook
            (lambda ()
              (setq-default inhibit-redisplay nil
                            inhibit-message nil)
              (redisplay)))

  ;; Site files tend to use `load-file', which emits "Loading X..." messages in
  ;; the echo area, which in turn triggers a redisplay. Redisplays can have a
  ;; substantial effect on startup times and in this case happens so early that
  ;; Emacs may flash white while starting up.
  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage))

  ;; Undo our `load-file' advice above, to limit the scope of any edge cases it
  ;; may introduce down the road.
  (define-advice startup--load-user-init-file (:before (&rest _) init-doom)
    (advice-remove #'load-file #'load-file@silence)))


;; speedup blub - Taken from Reddit somewhere
;; (let ((default-gc-threshold gc-cons-threshold)
;;       (default-gc-percentage gc-cons-percentage))
;;   (setq gc-cons-threshold most-positive-fixnum
;;         default-gc-percentage 0.8)
;;   (add-hook 'after-init-hook
;;             (lambda ()
;;               (setq gc-cons-percentage default-gc-percentage
;;                     gc-cons-threshold default-gc-threshold))))



;;; Basic UI Stuff
(setq inhibit-startup-message t) ;; Disables the startup message
(scroll-bar-mode -1)   ; Disables visible scroll bar
(tool-bar-mode -1)     ; Disable the toolbar
(tooltip-mode -1)      ; Disable tooltips
(set-fringe-mode 10)   ; Give some breathing room
(menu-bar-mode -1)     ; Disable the menu bar
(blink-cursor-mode -1) ; Makes cursor not blink
(column-number-mode 1) ;; Adds column numbering to the modeline
(electric-pair-mode -1); Turns off automatic pairing of brackets
;; (electric-indent-mode -1) ;; Turns off automatic indenting



;; Make the initial buffer load faster by setting it to fundamental-mode
(setq initial-major-mode 'fundamental-mode)

;; Set the fonts
(defvar jl/prog-font
  "Fira Code")

(defvar jl/text-font
  "Gill Sans")


(set-face-attribute 'default nil :family jl/prog-font :height 110)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :family jl/prog-font :height 110)
;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :family jl/text-font :height 140)

(set-face-attribute 'cursor nil :background "DarkGoldenrod2")
(set-face-attribute 'mode-line-active nil :inherit nil)

(setq frame-inhibit-implied-resize t)

(define-advice load-file (:override (file) silence)
  (load file nil 'nomessage))

(set-language-environment "UTF-8")
;; set-language-enviornment sets default-input-method, which is unwanted
(setq default-input-method nil)
#+END_SRC
* DONE Lexical-binding
#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-
#+end_src
* DONE Misc
#+begin_src elisp
(setq default-directory "/home/james/Documents/")
(setq dired-guess-shell-alist-user '(("\\.pdf\\'" "zathura")))
(setq read-process-output-max (* 1024 1024))
(setq-default indent-tabs-mode nil)
(setq vc-follow-symlinks t)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
* DONE Package managers
** DONE Straight.el
#+begin_src elisp
(setq straight-fix-flycheck t                ;; Gives a fix for flycheck
      straight-check-for-modifications 'live ;; Gives massive speed up to startup time
      straight-use-package-by-default t)     ;; Defaults use-package to use straight


;; Install straight package manager
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src
* DONE Cleaning folders and files
** Folders
*** Backup folder
#+begin_src elisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory)))) ;; Change backup location to a set folder
#+end_src
*** Auto-saves
#+begin_src elisp
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t) ;; Put auto-saves into set folder

(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves" user-emacs-directory) t)))
#+end_src
** Files
*** Whitespace (ws-butler)
#+BEGIN_SRC elisp
(use-package ws-butler
 :defer t
 :hook ((prog-mode text-mode) . ws-butler-mode))
#+END_SRC
* DONE Garbage collection
#+BEGIN_SRC elisp
(use-package gcmh
  :init
  (gcmh-mode 1))
#+END_SRC
* DONE Keybindings
** DONE Functions
*** sudo-edit
Shamelessly stolen from Spacemacs.
#+begin_src elisp
(defun sudo-edit (&optional arg)
  (interactive "P")
  (use-package tramp
    :defer t)
  (let ((fname (if (or arg (not buffer-file-name))
                   (read-file-name "File: ")
                 buffer-file-name)))
    (find-file
     (if (not (tramp-tramp-file-p fname))
         (concat "/sudo:root@localhost:" fname)
       (with-parsed-tramp-file-name fname parsed
         (when (equal parsed-user "root")
           (error "Already root!"))
         (let* ((new-hop (tramp-make-tramp-file-name
                          ;; Try to retrieve a tramp method suitable for
                          ;; multi-hopping
                          (cond ((tramp-get-method-parameter
                                  parsed 'tramp-login-program))
                                ((tramp-get-method-parameter
                                  parsed 'tramp-copy-program))
                                (t parsed-method))
                          parsed-user
                          parsed-domain
                          parsed-host
                          parsed-port
                          nil
                          parsed-hop))
                (new-hop (substring new-hop 1 -1))
                (new-hop (concat new-hop "|"))
                (new-fname (tramp-make-tramp-file-name
                            "sudo"
                            parsed-user
                            parsed-domain
                            parsed-host
                            parsed-port
                            parsed-localname
                            new-hop)))
           new-fname))))))
#+end_src
*** dotfiles
#+begin_src elisp
(defun find-emacs-dotfile ()
  "Edit the `dotfile', in the current window."
  (interactive)
  (find-file-existing "~/.emacs.d/ReadMe.org"))

(defun find-system-dotfile ()
  "Edit the `dotfile', in the current window."
  (interactive)
  (find-file-existing "~/.dotfiles/ReadMe.org"))
#+end_src
*** delete-this-file
#+BEGIN_SRC elisp
(defun delete-file-and-buffer ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (if (yes-or-no-p
           (format "Are you sure you want to delete this file: '%s'?" name))
          (progn
            (delete-file filename t)
            (kill-buffer buffer)
            (when (projectile-project-p))
              (call-interactively #'projectile-invalidate-cache))
            (message "File deleted: '%s'" filename))
        (message "Canceled: File deletion"))))
#+END_SRC
*** renaming
Taken from [[https://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/][emacsredux]].
#+BEGIN_SRC elisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

#+END_SRC
** DONE General
#+begin_src elisp
(use-package general
  :custom
  (general-override-states '(insert emacs hybrid normal visual motion operator replace))
  :config
  (general-auto-unbind-keys)
  (general-create-definer jl/SPC-keys :states '(normal visual motion) :keymaps 'override :prefix "SPC")

  (general-create-definer jl/major-modes :states '(normal visual motion) :prefix ",")

  (general-create-definer jl/C-c-keys :states '(normal visual insert emacs operator motion) :prefix "C-c")
  (jl/SPC-keys
    "a"  '(:ignore t :which-key "applications")
    "ae" '(:ignore t :which-key "email")
    "ar" '(:ignore t :which-key "readers")
    "as" '(:ignore t :which-key "shells")
    "at" '(:ignore t :which-key "tools")
    "b"  '(:ignore t :which-key "buffers")
    "c"  '(:ignore t :which-key "compile/Comments")
    "e"  '(:ignore t :which-key "errors")
    "f"  '(:which-key "files")
    "fe" '(:which-key "Emacs")
    "g"  '(:ignore t :which-key "git")
    "h"  '(:ignore t :which-key "help")
    "i"  '(:ignore t :which-key "insertion")
    "j"  '(:ignore t :which-key "jump/join/split")
    "k"  '(:ignore t :which-key "lisp")
    "n"  '(:ignore t :which-key "narrow/numbers")
    "p"  '(:ignore t :which-key "projects")
    "q"  '(:ignore t :which-key "quit")
    "r"  '(:ignore t :which-key "registers/rings/resume")
    "s"  '(:ignore t :which-key "search/symbol")
    "q"  '(:ignore t :which-key "quit")
    "t"  '(:ignore t :which-key "toggles")
    "w"  '(:ignore t :which-key "windows")
    "z"  '(:ignore t :which-key "zoom")
    "C"  '(:ignore t :which-key "Capture/Colours")
    "D"  '(:ignore t :which-key "Diff/compare")
    "F"  '(:ignore t :which-key "Frames")
    "K"  '(:ignore t :which-key "Keyboard Macros")
    "N"  '(:ignore t :which-key "Navigation")
    "S"  '(:ignore t :which-key "Spelling")
    "T"  '(:ignore t :which-key "UI toggles/Themes")
    "C-v" '(:ignore t :which-key "Rectangles")
    "m"   '(:ignore t :which-key "major mode")

    "!" 'eshell
    "fc" 'copy-file
    "fd" 'delete-file-and-buffer
    "fed" '(find-emacs-dotfile :which-key "Open init file")
    "fnd" '(find-system-dotfile :which-key "Open dotfiles")
    "fE" '(sudo-edit :which-key "Edit with sudo...")
    "fR" 'rename-file-and-buffer
    "fs" '(save-buffer :which-key "save")
    "qq" 'kill-emacs
    "ts" '(hydra-text-scale/body :which-key "scale text")
    "w-" 'split-window-below
    "w/" 'split-window-right
    "wd" 'delete-window))
#+end_src
** DONE Misc
#+begin_src elisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(general-define-key
 :states 'normal
 "p" 'counsel-yank-pop
 "C-r" 'undo-tree-redo
 "u" 'undo-tree-undo)
#+end_src
** DONE Hydra
We use the [[https://github.com/abo-abo/hydra][Hydra]] package for transient buffers.
#+begin_src elisp
(use-package hydra
  :defer t
  :init
  (defhydra hydra-text-scale (:hint nil) ;;(:timeout 4) ;; -- I don't want a timeout
    "
^Increase^    ^Decrease^    ^Reset
^^^^^------------------------------
[_+_]         [_-_]         [_0_]
[_k_]         [_j_]         ^
"
    ("k" text-scale-increase)
    ("+" text-scale-increase)

    ("j" text-scale-decrease)
    ("-" text-scale-decrease)

    ("0" (text-scale-adjust 0))
    ("f" nil "finished" :exit t))

  (defhydra jl/pasting-hydra ()
    "Pasting Transient State"
    ("C-j" evil-paste-pop)
    ("C-k" evil-paste-pop-next)
    ("p" evil-paste-after)
    ("P" evil-paste-before))

  (general-define-key
   :states 'normal
   "p"  'jl/pasting-hydra/evil-paste-after))
#+end_src
** DONE Evil mode
*** evil
#+begin_src elisp
(use-package evil
  ;; :defer .1
  :custom
  (evil-want-keybinding nil)
  (evil-normal-state-cursor '("#DAA520" box))
  (evil-insert-state-cursor '("#50FA7B" bar))
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  (define-key evil-insert-state-map (kbd "C-k") nil))
#+end_src
*** evil-collection
#+begin_src elisp
(use-package evil-collection
  :diminish t
  :after (evil)
  :config
  (evil-collection-init))
#+end_src
*** evil-commentary
#+begin_src elisp
(use-package evil-commentary
  :diminish t
  :after (evil)
  :config
  (evil-commentary-mode 1))
#+end_src
*** evil-surround
#+BEGIN_SRC elisp
(use-package evil-surround
  :after (evil)
  :config
  (global-evil-surround-mode 1))
#+END_SRC
*** evil-escape
#+BEGIN_SRC elisp
(use-package evil-escape
  :diminish t
  :after (evil)
  :config
  (evil-escape-mode)
  (setq-default evil-escape-key-sequence "jk")
  (setq-default evil-escape-delay 0.2))
#+END_SRC
*** evil-tex
#+BEGIN_SRC elisp
(use-package evil-tex
  :hook (LaTeX-mode . evil-tex-mode)
  :after (evil))
#+END_SRC
** DONE Which-key
Adds the popup for key commands with mulitple key presses.
#+begin_src elisp
(use-package which-key
  :after (evil)
  :config
  (which-key-mode)
  :diminish which-key-mode
  :custom
  (which-key-idle-delay 0.4)
  (which-key-idle-secondary-delay 0.01)
  (which-key-sort-order 'which-key-prefix-then-key-order)
  (which-key-sort-uppercase-first nil)
  (which-key-min-display-lines 6)
  (which-key-max-description-length 32)
  (which-key-add-column-padding 1)
  (which-key-allow-multiple-replacements t))
#+end_src
* TODO UI configuration
** DONE Warnings
#+begin_src elisp
(setq warning-suppress-types '((comp) (org-roam) (org-element-cache) ()(:warning)))
#+end_src
** DONE Solaire mode
#+BEGIN_SRC elisp
(use-package solaire-mode
  :custom
  (solaire-global-mode +1))
#+END_SRC
** DONE Themes
*** Doom themes
#+begin_src elisp
(use-package doom-themes
  :defer t
  :hook (server-after-make-frame . (lambda () (load-theme
					       'doom-palenight t)))
  :init
  (load-theme 'doom-palenight t))
#+end_src
*** Nord
#+begin_src elisp
(use-package nord-theme
  :defer t)
#+end_src
*** Dracula
#+begin_src elisp
(use-package dracula-theme
  :defer t)
#+end_src
** DONE All the icons
#+BEGIN_SRC elisp
(use-package all-the-icons
  :straight (all-the-icons :type git :host github :repo "domtronn/all-the-icons.el"
			   :fork (:host github
					:repo "jeslie0/all-the-icons.el")
			   :files (:defaults "data" "all-the-icons.el"))
  :config
  (progn
    (setf (alist-get "v" all-the-icons-extension-icon-alist nil nil #'equal) '(all-the-icons-fileicon "coq" :height 1.0 :v-adjust -0.2 :face all-the-icons-lred))
    (add-to-list 'all-the-icons-data/file-icon-alist '("agda" . "\x1315a"))
    (add-to-list 'all-the-icons-extension-icon-alist '("agda" all-the-icons-fileicon "agda" :height 1.0 :v-adjust -0.2 :face all-the-icons-lblue))
    (add-to-list 'all-the-icons-extension-icon-alist '("lagda" all-the-icons-fileicon "agda" :height 1.0 :v-adjust -0.2 :face all-the-icons-lblue))))
#+END_SRC
*** TODO All the icons dired
#+BEGIN_SRC elisp
(use-package all-the-icons-dired
  :commands (dired)
  :hook (dired-mode . all-the-icons-dired-mode)
  :custom
  (all-the-icons-dired-monochrome nil))
#+END_SRC
** DONE Modeline
We use doom modeline.
#+begin_src elisp
(use-package doom-modeline
  :custom
  (inhibit-compacting-font-caches t)
  :init (doom-modeline-mode))
#+end_src
** DONE Emacs-winum
*** Keybindings
#+begin_src elisp
(defun jl/winum-keys ()
  (defhydra window-transient-state ()
    "Window Transient State"
    ;; Select
    ("j" evil-window-down)
    ("<down>" evil-window-down)
    ("k" evil-window-up)
    ("<up>" evil-window-up)
    ("h" evil-window-left)
    ("<left>" evil-window-left)
    ("l" evil-window-right)
    ("<right>" evil-window-right)
    ("0" winum-select-window-0)
    ("1" winum-select-window-1)
    ("2" winum-select-window-2)
    ("3" winum-select-window-3)
    ("4" winum-select-window-4)
    ("5" winum-select-window-5)
    ("6" winum-select-window-6)
    ("7" winum-select-window-7)
    ("8" winum-select-window-8)
    ("9" winum-select-window-9)
    ("a" ace-window)
    ("o" other-frame)
    ("w" other-window)
    ;; Move
    ("J" evil-window-move-very-bottom)
    ("<S-down>" evil-window-move-very-bottom)
    ("K" evil-window-move-very-top)
    ("<S-up>" evil-window-move-very-top)
    ("H" evil-window-move-far-left)
    ("<S-left>" evil-window-move-far-left)
    ("L" evil-window-move-far-right)
    ("<S-right>" evil-window-move-far-right)
    ("r" rotate-windows-forward)
    ("R" rotate-windows-backward)
    ;; Split
    ("s" split-window-below)
    ("S" split-window-below-and-focus)
    ("-" split-window-below-and-focus)
    ("v" split-window-right)
    ("V" split-window-right-and-focus)
    ("/" split-window-right-and-focus)
    ("m" toggle-maximize-buffer)
    ("|" maximize-vertically)
    ("_" maximize-horizontally)
    ;; Resize
    ("[" shrink-window-horizontally)
    ("]" enlarge-window-horizontally)
    ("{" shrink-window)
    ("}" enlarge-window)
    ;; Other
    ("d" delete-window)
    ("D" delete-other-windows)
    ("u" winner-undo)
    ("U" winner-redo)
    ("q" nil :exit t))

  (jl/SPC-keys
    "0" '(winum-select-window-0 :which-key "Select window 0")
    "1" '(winum-select-window-1 :which-key "Select window 1")
    "2" '(winum-select-window-2 :which-key "Select window 2")
    "3" '(winum-select-window-3 :which-key "Select window 3")
    "4" '(winum-select-window-4 :which-key "Select window 4")
    "5" '(winum-select-window-5 :which-key "Select window 5")
    "6" '(winum-select-window-6 :which-key "Select window 6")
    "7" '(winum-select-window-7 :which-key "Select window 7")
    "8" '(winum-select-window-8 :which-key "Select window 8")
    "9" '(winum-select-window-9 :which-key "Select window 9")
    "w." 'window-transient-state/body))
#+end_src
*** Initialisation
#+begin_src elisp
(use-package winum
  :after doom-modeline
  :config (winum-mode)
  :diminish winum-mode
  :config
  (jl/winum-keys))
#+end_src
** DONE Perspective
*** Functions
Mostly taken from Spacemacs.
#+begin_src elisp
(defun jl/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))

(defun toggle-centered-buffer ()
  "Toggle visual centering of the current buffer."
  (interactive)
  (cl-letf ((writeroom-maximize-window nil)
         (writeroom-mode-line t))
    (call-interactively 'writeroom-mode)))

(defun toggle-distraction-free ()
  "Toggle visual distraction free mode."
  (interactive)
  (cl-letf ((writeroom-maximize-window t)
         (writeroom-mode-line nil))
    (call-interactively 'writeroom-mode)))

;; (defun spacemacs/centered-buffer-transient-state ()
;;   "Center buffer and enable centering transient state."
;;   (interactive)
;;   (cl-letf ((writeroom-maximize-window nil)
;;          (writeroom-mode-line t))
;;     (writeroom-mode 1)
;;     (spacemacs/centered-buffer-mode-transient-state/body)))
#+end_src
*** Initialisation
#+begin_src elisp
(use-package perspective
  :defer .1
  :general
  ("C-x k" 'persp-kill-buffer*)
  (jl/SPC-keys
    "b'" 'persp-switch-by-number
    "ba" 'persp-add-buffer
    "bA" 'persp-set-buffer
    "bD" 'persp-remove-buffer
    "bd" '(jl/kill-this-buffer :which-key: "kill-this-buffer")
    "bi" 'persp-import
    "bk" '(persp-kill :which-key "kill perspective")
    "bn" 'next-buffer
    "bN" 'persp-next
    "bp" 'previous-buffer
    "bP" 'persp-prev
    "bs" '(persp-switch :which-key "switch perspective")
    "bS" 'persp-state-save
    "bL" 'persp-state-load

    "bR" 'revert-buffer)
  :config
  (setq persp-suppress-no-prefix-key-warning t)
  (persp-mode))
#+end_src
** TODO Fillings
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook 'auto-fill-mode)
(setq comment-auto-fill-only-comments t)
(add-hook 'text-mode-hook 'visual-line-mode)
#+END_SRC
** DONE recentf
#+BEGIN_SRC elisp
(use-package recentf
  :config
  (add-to-list 'recentf-exclude (expand-file-name "~/.elfeed/index"))
  (add-to-list 'recentf-exclude (expand-file-name "~/.dotfiles/.emacs.d/bookmarks"))
  (add-to-list 'recentf-exclude (expand-file-name "~/.emacs.d/bookmarks"))
  (add-to-list 'recentf-exclude (expand-file-name "~/.dotfiles/.emacs.d/ReadMe.org")))
#+END_SRC
** DONE ligature.el
#+BEGIN_SRC elisp
(use-package ligature
  :after prog-mode
  :straight (:host github :repo "mickeynp/ligature.el" :branch "master" :files ("ligature.el"))
  :config
  (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                       ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                       "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                       "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                       "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                       "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                       "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                       "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                       "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                       "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

  (global-ligature-mode 't))
#+END_SRC
* DONE Completion frameworks
** Ivy and Counsel
#+begin_src elisp :tangle no
(use-package ivy
  :diminish ;; Hides minor mode from mode-line minor mode list
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1)
  :custom
  (ivy-use-selectable-prompt t)
  )

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-f" . 'counsel-minibuffer-history))
  :init
  (counsel-mode 1)
  (jl/SPC-keys
  "SPC" '(counsel-M-x :which-key "M-x")
  "ff" '(counsel-find-file :which-key "find file")
  "tt" '(counsel-load-theme :which-key "choose theme")
  "bb" '(persp-counsel-switch-buffer :which-key "show local buffers")
  "bB" '(counsel-ibuffer :which-key "show all buffers") ;; DON'T USE THIS, USE C-u SPC b b
  "/" 'counsel-rg))

(use-package ivy-rich
  :after (ivy counsel)
  :config
  (ivy-rich-mode 1))

(use-package all-the-icons-ivy-rich
  :after (ivy ivy-rich all-the-icons)
  :config
  (all-the-icons-ivy-rich-mode 1))

(use-package ivy-prescient
  :after (ivy counsel)
  :custom
  (prescient-sort-length-enable t)
  (ivy-prescient-retain-classic-highlighting t)
  (prescient-save-file "~/.emacs.d/prescient-data")
  :config
  (ivy-prescient-mode 1)
  (prescient-persist-mode 1))
  #+end_src
** Vertico
*** Functions
#+BEGIN_SRC elisp :tangle no
(defun minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a character backward"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (delete-backward-char arg)))
#+END_SRC
*** DONE Initialisation
#+BEGIN_SRC elisp
(use-package vertico
  :straight (vertico :includes vertico-directory
                     :files (:defaults "extensions/vertico-directory.el"))
  :general (:keymaps 'vertico-map
                     "C-j" 'vertico-next
                     "C-k" 'vertico-previous
                     "C-g" 'vertico-exit
                     "RET" 'vertico-directory-enter
                     "DEL" 'vertico-directory-delete-char
                     "M-DEL" 'vertico-directory-delete-word)
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+END_SRC
*** DONE Marginalia
#+BEGIN_SRC elisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+END_SRC
*** DONE Consult
#+BEGIN_SRC elisp
(use-package consult
  :general
  ("C-s" 'consult-line)
  (jl/SPC-keys
    "SPC" '(execute-extended-command :which-key "M-x")
    "C-e" 'consult-flymake
    "C-s" 'consult-imenu
    "C-<return>" 'consult-minor-mode-menu
    "ff" '(find-file :which-key "find file")
    "tt" '(consult-theme :which-key "choose theme")
    "bb" 'persp-switch-to-buffer*
    "/"  'consult-ripgrep)
  (jl/major-modes
    :keymaps 'org-mode-map
    :states '(normal visual operator)
    :major-modes t
    "C-s" 'consult-org-heading))
#+END_SRC
*** DONE Orderless
Allows for partial searching in vertico.
#+BEGIN_SRC elisp
(use-package orderless
  :defer t
  :after vertico
  :custom
  (completion-styles '(orderless)))
#+END_SRC
*** DONE all-the-icons-completion
#+BEGIN_SRC elisp
(use-package all-the-icons-completion
  :after marginalia
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+END_SRC
*** DONE savehist
#+BEGIN_SRC elisp
(use-package savehist
  :after vertico
  :init
  (savehist-mode))
#+END_SRC
*** DONE App launcher
#+BEGIN_SRC elisp
(use-package app-launcher
  :defer t
  :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
  :commands (app-launcher-run-app)
  :general
  (jl/SPC-keys
    "RET" 'app-launcher-run-app))
#+END_SRC
*** DONE Embark
**** Initialisation
#+BEGIN_SRC elisp
(use-package embark
  :commands
  (embark-act
   embark-dwim
   embark-bindings)
  :general
  ("C-." 'embark-act
   "M-."  'embark-dwim
   "C-h B" 'embark-bindings)
  :custom
  (prefix-help-command #'embark-prefix-help-command))
#+END_SRC
**** embark-consult
#+BEGIN_SRC elisp :tangle no
(use-package embark-consult
  :defer t
  :after (embark consult))
#+END_SRC
* DONE Project Management
** DONE Projectile
*** DONE Initialisation
#+begin_src elisp
(use-package projectile
  :diminish projectile-mode
  :general
  (jl/SPC-keys
    ;; Project
    "p!" 'projectile-run-shell-command-in-root
    "p&" 'projectile-run-async-shell-command-in-root
    "p%" 'projectile-replace-regexp
    "pa" 'projectile-toggle-between-implementation-and-test
    ;; "pb" 'projectile-switch-to-buffer
    "pc" 'projectile-compile-project
    ;; "pd" 'projectile-find-dir
    "pD" 'projectile-dired
    "pe" 'projectile-edit-dir-locals
    ;; "pf" 'projectile-find-file
    "pF" 'projectile-find-file-dwim
    "pg" 'projectile-find-tag
    "pG" 'projectile-regenerate-tags
    "pI" 'projectile-invalidate-cache
    "pk" 'projectile-kill-buffers
    ;; "pp" 'projectile-switch-project
    ;; "pr" 'projectile-recentf
    "pR" 'projectile-replace
    "pT" 'projectile-test-project
    "pv" 'projectile-vc)
  :init
  (projectile-mode))
#+end_src
*** DONE consult-projectile
#+BEGIN_SRC elisp
(use-package consult-projectile
  ;; :after (consult projectile)
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :general
  (jl/SPC-keys
    "pf" 'consult-projectile-find-file
    "pd" 'consult-projectile-find-dir
    "pr" 'consult-projectile-recentf
    "pp" 'consult-projectile-switch-project
    "pb" 'consult-projectile-switch-to-buffer
    "pP" 'consult-projectile))
#+END_SRC
** DONE Magit
#+begin_src elisp
(use-package magit
  :commands magit-status
  :general
  (jl/SPC-keys
    "gs" 'magit-status)
  :config
  (evil-define-minor-mode-key 'normal 'git-commit-mode ",," 'with-editor-finish)
  (evil-define-minor-mode-key 'normal 'git-commit-mode ",a" 'with-editor-cancel))
#+end_src
** DONE Treemacs
*** DONE Initialisation
#+begin_src elisp
(use-package treemacs
  :commands (treemacs)
  :general
  (jl/SPC-keys
    "0"  'treemacs-select-window
    "ft" 'treemacs)
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :custom
  ;; (treemacs-collapse-dirs                 (if treemacs-python-executable 3 0))
  (treemacs-deferred-git-apply-delay      0.5)
  (treemacs-directory-name-transformer    #'identity)
  (treemacs-display-in-side-window        t)
  (treemacs-eldoc-display                 t)
  (treemacs-file-event-delay              5000)
  (treemacs-file-extension-regex          treemacs-last-period-regex-value)
  (treemacs-file-follow-delay             0.2)
  (treemacs-file-name-transformer         #'identity)
  (treemacs-follow-after-init             t)
  (treemacs-expand-after-init             t)
  (treemacs-git-command-pipe              "")
  (treemacs-goto-tag-strategy             'refetch-index)
  (treemacs-indentation                   2)
  (treemacs-indentation-string            " ")
  (treemacs-is-never-other-window         nil)
  (treemacs-max-git-entries               5000)
  (treemacs-missing-project-action        'ask)
  (treemacs-move-forward-on-expand        nil)
  (treemacs-no-png-images                 nil)
  (treemacs-no-delete-other-windows       t)
  (treemacs-project-follow-cleanup        nil)
  (treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
  (treemacs-position                      'left)
  (treemacs-read-string-input             'from-child-frame)
  (treemacs-recenter-distance             0.1)
  (treemacs-recenter-after-file-follow    nil)
  (treemacs-recenter-after-tag-follow     nil)
  (treemacs-recenter-after-project-jump   'always)
  (treemacs-recenter-after-project-expand 'on-distance)
  (treemacs-litter-directories            '("/node_modules" "/.venv" "/.cask"))
  (treemacs-show-cursor                   nil)
  (treemacs-show-hidden-files             t)
  (treemacs-silent-filewatch              nil)
  (treemacs-silent-refresh                nil)
  (treemacs-sorting                       'alphabetic-asc)
  (treemacs-space-between-root-nodes      t)
  (treemacs-tag-follow-cleanup            t)
  (treemacs-tag-follow-delay              1.5)
  (treemacs-user-mode-line-format         nil)
  (treemacs-user-header-line-format       nil)
  (treemacs-width                         35)
  (treemacs-workspace-switch-cleanup      nil)
  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;; (treemacs-resize-icons 44)
  :config
  (progn (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode 'always)
	 (pcase (cons (not (null (executable-find "git")))
                      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple)))

	 (treemacs-hide-gitignored-files-mode nil)))
        #+END_SRC
*** DONE Treemacs evil
#+BEGIN_SRC elisp
(use-package treemacs-evil
  :defer t
  :after (treemacs evil))
#+END_SRC
*** DONE Treemacs projectile
#+BEGIN_SRC elisp
(use-package treemacs-projectile
  :defer t
  :after (treemacs projectile))
#+END_SRC
*** DONE Treemacs icons dired
#+BEGIN_SRC elisp
(use-package treemacs-icons-dired
  :defer t
  :after (treemacs dired)
  :config (treemacs-icons-dired-mode))
#+END_SRC
*** DONE Treemacs magit
#+BEGIN_SRC elisp
(use-package treemacs-magit
  :defer t
  :after (treemacs magit))
#+END_SRC
*** DONE Treemacs persp
#+BEGIN_SRC elisp
(use-package treemacs-perspective ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :defer t
  :after (treemacs perspective) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))
  #+end_src
*** DONE Treemacs all-the-icons
#+begin_src elisp
(use-package treemacs-all-the-icons
  :after (treemacs all-the-icons)
  :hook ((treemacs-mode dired-mode) . (lambda ()
					(treemacs-load-theme 'all-the-icons))))
#+end_src
** DONE Helpful
Provides better documentation.
#+begin_src elisp
(use-package helpful
  ;; :after ivy
  :after vertico
  ;; :custom
  ;; (counsel-describe-function-function #'helpful-callable)
  ;; (counsel-describe-variable-function #'helpful-variable)
  :bind
  ;; ([remap describe-function] . counsel-describe-function)
  ([remap describe-function] . helpful-function)
  ([remap describe-command]  . helpful-command)
  ;; ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key]      . helpful-key)
  :init
  (defvar read-symbol-positions-list nil)) ;; bug fix
#+end_src
** DONE Eldoc
*** Initialisation
#+BEGIN_SRC elisp
(use-package eldoc
  :defer t
  :commands (eldoc)
  :custom
  (eldoc-echo-area-prefer-doc-buffer t)
  (eldoc-idle-delay 0.5)
  (eldoc-echo-area-use-multiline-p nil))
#+END_SRC
*** eldoc-box
#+BEGIN_SRC elisp
(use-package eldoc-box
  :commands eldoc-box-eglot-help-at-point
  :config
  (set-face-attribute 'eldoc-box-body nil :background (face-background 'solaire-default-face)))
#+END_SRC
* DONE Dashboard
** Functions
#+begin_src elisp
#+end_src
** Initialisation
#+begin_src elisp
(use-package dashboard
  :general
  (jl/SPC-keys
    :no-autoload t
    "bh" 'buffer-visit-dashboard)
  (:keymaps 'dashboard-mode-map
            :states '(normal motion)
            :no-autoload t
            "j"  'widget-forward
            "k"  'widget-backward)
  :custom
  ;; Set the title
  (dashboard-banner-logo-title "Welcome to Emacs")
  ;; Set the logo
  (dashboard-startup-banner "/home/james/.emacs.d/Icons/EmacsLogo.svg")
  (dashboard-image-banner-max-width 300)

  ;; Content is not centered by default. To center, set
  (dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  (dashboard-show-shortcuts nil)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  ;; (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
  (dashboard-items '((recents . 5)
		     (projects . 5)
))

  (initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

  :config
  (defun buffer-visit-dashboard ()
    (interactive)
    (switch-to-buffer "*dashboard*")
    (dashboard-refresh-buffer))
  (dashboard-setup-startup-hook)
  (dashboard-refresh-buffer))
#+end_src
* DONE Minor modes
** DONE Rainbow Delimiters
#+begin_src elisp
(use-package rainbow-delimiters
  :defer t
  :hook ((prog-mode agda2-mode) . rainbow-delimiters-mode))
#+end_src
** DONE Outshine
#+begin_src elisp
(use-package outshine
  :defer t
  :hook ((prog-mode LaTeX-mode) . outshine-mode))
#+end_src
** DONE Aggressive indent
#+BEGIN_SRC elisp
(use-package aggressive-indent
  :defer t
  ;; :init
  ;; (global-aggressive-indent-mode 1)
  :config
  (add-to-list 'aggressive-indent-excluded-modes 'cc-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'c-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-cabal-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'haskell-mode))
#+END_SRC
** DONE Golden Ratio
#+BEGIN_SRC elisp
(use-package golden-ratio
  :defer t)
#+END_SRC
** DONE Highlight-indent-guides
#+BEGIN_SRC elisp
(use-package highlight-indent-guides
  :defer t
  :hook ((prog-mode LaTeX-mode). highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+END_SRC
** DONE Page break lines
#+BEGIN_SRC elisp
(use-package page-break-lines
  :defer t
  :after dashboard)
#+END_SRC
** DONE Smartparens
#+BEGIN_SRC elisp
(use-package smartparens
  :defer t)
#+END_SRC
** DONE Save place mode
#+begin_src elisp
(use-package saveplace
  :defer t
  :hook ((prog-mode text-mode) . save-place-mode))
#+end_src
** DONE Variable pitch
#+BEGIN_SRC elisp
(use-package variable-pitch
  :defer t
  :straight face-remap)
#+END_SRC
** DONE Visual line mode
#+BEGIN_SRC elisp
(add-hook 'text-mode-hook 'visual-line-mode)
#+END_SRC
** DONE hl-todo
#+BEGIN_SRC elisp
(use-package hl-todo
  :defer t
  :hook ((prog-mode text-mode) . hl-todo-mode)
  :after org
  :config
  (add-to-list 'hl-todo-keyword-faces `("TODO" . ,(face-foreground 'org-todo)))
  ;; (add-to-list 'hl-todo-keyword-faces `("DONE" . ,(face-foreground 'org-done)))
  )
#+END_SRC
* DONE Passwords
** DONE Pin entry and GPG key
#+begin_src elisp
(setq epa-pinentry-mode 'loopback)
(setq auth-sources '(password-store))
(setq epa-file-encrypt-to '("86AC9FE03B59F914725208DECF6607D8EB302630")
      epa-file-select-keys 1)
(auth-source-pass-enable)
#+end_src
** DONE [#B] Pass
*** Functions
#+begin_src elisp
  (defun spacemacs//pass-completing-read ()
  "Read a password entry in the minibuffer, with completion."
  (completing-read "Password entry: " (password-store-list)))

(defun spacemacs/pass-copy-and-describe (entry)
  "Copy the password to the clipboard, and show the multiline description for ENTRY"
  (interactive (list (spacemacs//pass-completing-read)))
  (password-store-copy entry)
  (spacemacs/pass-describe entry))

(defun spacemacs/pass-describe (entry)
  "Show the multiline description for ENTRY"
  (interactive (list (spacemacs//pass-completing-read)))
  (let ((description (s-join "\n" (cdr (s-lines (password-store--run-show entry))))))
    (message "%s" description)))
#+end_src
*** DONE Ivy-pass
#+begin_src elisp :tangle no
(use-package ivy-pass
  :defer t
  :after ivy)
#+end_src
*** DONE Password-store
**** Initialisation
#+begin_src elisp
(use-package password-store
  :general
  (jl/SPC-keys
    "apy" 'password-store-copy
    "apg" 'password-store-generate
    "api" 'password-store-insert
    "apc" 'password-store-edit
    "apr" 'password-store-rename
    "apd" 'password-store-remove
    "apD" 'password-store-clear
    "apI" 'password-store-init
    "apw" 'password-store-url)
  (jl/SPC-keys
    "ap" '(:ignore t :which-key "pass")))
#+end_src
*** DONE Password-store otp
**** Initialisation
#+begin_src elisp
(use-package password-store-otp
  :defer t
  :general
  (jl/SPC-keys
    "apoy" 'password-store-otp-token-copy
    "apoY" 'password-store-otp-uri-copy
    "apoi" 'password-store-otp-insert
    "apoa" 'password-store-otp-append
    "apoA" 'password-store-otp-append-from-image)
  (jl/SPC-keys
    "apo" '(:ignore t :which-key "otp")))
#+end_src
*** DONE Auth source pass
#+begin_src elisp
(use-package auth-source-pass
  :config
  (auth-source-pass-enable))
#+end_src
* DONE Languages
** TODO Tools
*** TODO LSP
**** Keybindings
#+begin_src elisp :tangle no
(defun jl/lsp-keys-descr ()
  (jl/major-modes
   :keymaps lsp-mode-maps
   :states '(normal visual motion)
   :major-modes t
   "a" '(:ignore t :which-key "code action")
   "f" '(:ignore t :which-key "format")
   "g" '(:ignore t :which-key "goto")
   "h" '(:ignore t :which-key "help")
   "b" '(:ignore t :which-key "backend")
   "r" '(:ignore t :which-key "refactor")
   "l" '(:ignore t :which-key "lsp")
   "T" '(:ignore t :which-key "toggle")
   "F" '(:ignore t :which-key "folder")
   "x" '(:ignore t :which-key "text/code")
   )
  )

(defun jl/lsp-keys ()
  (jl/major-modes
   :keymaps lsp-mode-maps
   :major-modes t
   :states '(normal visual motion)
   ;; code actions
   "aa" 'lsp-execute-code-action
   "al" 'lsp-avy-lens
   "as" 'lsp-ui-sideline-apply-code-actions
   ;; format
   "fb" 'lsp-format-buffer
   "fr" 'lsp-format-region
   "fo" 'lsp-organize-imports
   ;; goto
   ;; N.B. implementation and references covered by xref bindings / lsp provider...
   "gt" #'lsp-find-type-definition
   ;; "gk" #'spacemacs/lsp-avy-goto-word
   ;; "gK" #'spacemacs/lsp-avy-goto-symbol
   "gM" #'lsp-ui-imenu
   ;; help
   "hh" #'lsp-describe-thing-at-point
   ;; jump
   ;; backend
   "bd" #'lsp-describe-session
   "br" #'lsp-workspace-restart
   "bs" #'lsp-workspace-shutdown
   "bv" #'lsp-version
   ;; refactor
   "rR" #'lsp-rename
   ;; toggles
   "Td" #'lsp-ui-doc-mode
   "Ts" #'lsp-ui-sideline-mode
   ;; "TF" #'spacemacs/lsp-ui-doc-func
   ;; "TS" #'spacemacs/lsp-ui-sideline-symb
   ;; "TI" #'spacemacs/lsp-ui-sideline-ignore-duplicate
   "Tl" #'lsp-lens-mode
   ;; folders
   "Fs" #'lsp-workspace-folders-switch
   "Fr" #'lsp-workspace-folders-remove
   "Fa" #'lsp-workspace-folders-add
   ;; text/code
   "xh" #'lsp-document-highlight
   "xl" #'lsp-lens-show
   "xL" #'lsp-lens-hide
   )
  )
#+end_src
**** DONE Initialisation
#+begin_src elisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :general
  (jl/major-modes
    :keymaps 'lsp-mode-map
    :states '(normal visual motion)
    "=" '(:ignore t :which-key "format")
    "==" #'lsp-format-buffer
    "=r" #'lsp-format-region

    "a" '(:ignore t :which-key "action")
    "aa" #'lsp-execute-code-action
    "al" #'lsp-avy-lens
    "ah" #'lsp-document-highlight
    "as" #'lsp-ui-sideline-apply-code-actions

    "F" '(:ignore t :which-key "folders")
    "Fa" #'lsp-workspace-folders-add
    "Fr" #'lsp-workspace-folders-remove
    "Fs" #'lsp-workspace-folders-switch
    "Fb" #'lsp-workspace-blacklist-remove

    "g" '(:ignore t :which-key "go-to")
    "gg" #'lsp-find-definition
    "gr" #'lsp-find-references
    "gi" #'lsp-find-implementation
    "gt" #'lsp-find-type-definition
    "gd" #'lsp-find-declaration
    ;; "ga" #'lsp-find-m

    "G" '(:ignore t :which-key "peek")
    "Gg" #'lsp-ui-peek-find-definitions
    "Gr" #'lsp-ui-peek-find-references
    "Gi" #'lsp-ui-peek-find-implementation
    "Gs" #'lsp-ui-peek-find-workspace-symbol

    "h" '(:ignore t :which-key "help")
    "hh" #'lsp-describe-thing-at-point
    "hs" #'lsp-signature-activate
    "hg" #'lsp-ui-doc-show

    "r" '(:ignore t :which-key "organize")
    "rr" #'lsp-rename
    "ro" #'lsp-organize-imports

    "T" '(:ignore t :which-key "toggle")
    "Tl" #'lsp-lens-mode
    "TL" #'lsp-toggle-trace-io
    "Th" #'lsp-toggle-symbol-highlight
    "TS" #'lsp-ui-sideline-mode
    "Td" #'lsp-ui-doc-mode
    "Ts" #'lsp-toggle-signature-auto-activate
    "Tf" #'lsp-toggle-on-type-formatting
    "TT" #'lsp-treemacs-sync-mode
    "Tld" #'lsp-ui-doc-mode
    "Tls" #'lsp-ui-sideline-mode

    "w" '(:ignore t :which-key "workspaces")
    "ws" #'lsp
    "wr" #'lsp-workspace-restart
    "wq" #'lsp-workspace-shutdown
    "wd" #'lsp-describe-session
    "wD" #'lsp-disconnect
    "wv" #'lsp-version)
  ;; (advice-add 'lsp :before #'direnv-update-environment)
  :custom
  (lsp-modeline-code-actions-enable nil)
  (lsp-idle-delay 0.500)
  (lsp-lens-place-position 'above-line)
  (lsp-log-io nil)
  (lsp-headerline-breadcrumb-icons-enable nil)
  (lsp-file-watch-ignored '("[/\\\\]\\.direnv$"
					; SCM tools
			    "[/\\\\]\\.git$"
			    "[/\\\\]\\.hg$"
			    "[/\\\\]\\.bzr$"
			    "[/\\\\]_darcs$"
			    "[/\\\\]\\.svn$"
			    "[/\\\\]_FOSSIL_$"
					; IDE tools
			    "[/\\\\]\\.idea$"
			    "[/\\\\]\\.ensime_cache$"
			    "[/\\\\]\\.eunit$"
			    "[/\\\\]node_modules$"
			    "[/\\\\]\\.fslckout$"
			    "[/\\\\]\\.tox$"
			    "[/\\\\]\\.stack-work$"
			    "[/\\\\]\\.bloop$"
			    "[/\\\\]\\.metals$"
			    "[/\\\\]target$"
					; Autotools output
			    "[/\\\\]\\.deps$"
			    "[/\\\\]build-aux$"
			    "[/\\\\]autom4te.cache$"
			    "[/\\\\]\\.reference$"
					; Haskell stuff
			    "[/\\\\]\\dist-newstyle$"
			    )))
#+end_src
**** DONE lsp-ui
#+begin_src elisp
(use-package lsp-ui
  :after (lsp)
  :commands (lsp-ui-mode)
  :custom
  (lsp-lens-enable 1)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-show-with-cursor t))
#+end_src
**** TODO lsp-treemacs
#+begin_src elisp
(use-package lsp-treemacs
  :general
  (jl/major-modes
    :keymaps 'lsp-mode-map
    :states '(normal visual motion)
    "t" '(:ignore t :which-key "lsp-treemacs")
    "th" #'lsp-treemacs-call-hierarchy
    "te" #'lsp-treemacs-errors-list
    "tr" #'lsp-treemacs-references
    "ts" #'lsp-treemacs-symbols)
  :config
  (lsp-treemacs-sync-mode 1))
  #+end_src
**** TODO lsp-ivy
#+begin_src elisp :tangle no
(use-package lsp-ivy
  :after (lsp ivy)
  :commands (lsp-ivy-workspace-symbol
             lsp-ivy-global-workspace-symbol)
  :general
  (jl/major-modes
    :keymaps 'lsp-mode-map
    :states '(normal visual motion)
    :major-modes t
    "i"  '(:toggle nil :which-key "lsp-ivy")
    "is" 'lsp-ivy-workspace-symbol
    "iS" 'lsp-ivy-global-workspace-symbol))
#+end_src
*** DONE Eglot
#+BEGIN_SRC elisp
(use-package eglot
  :commands (eglot)
  :general
  (jl/major-modes
    :keymaps 'eglot-mode-map
    :states '(normal visual operator)
    "="   '(:ignore t :which-key "eglot")
    "=S"  '(:ignore t :which-key "server")
    "=B"  '(:ignore t :which-key "buffers")

    "=Se" 'eglot
    "=Sr" 'eglot-reconnect
    "=Ss" 'eglot-shutdown
    "=SS" 'eglot-shutdown-all
    "=Sc" 'eglot-signal-didChangeConfiguration

    "=r"  'eglot-rename
    "=f"  'eglot-format
    "=a"  'eglot-code-actions
    "=D"  'eldoc
    "=g"  'xref-find-definitions

    "=Be" 'eglot-events-buffer
    "=Bs" 'eglot-stderr-buffer)
  :custom
  (eglot-confirm-server-initiated-edits nil)
  :config
  (general-define-key
   :keymaps 'eglot-mode-map
   :states '(normal operator)
   "K" 'eldoc-box-eglot-help-at-point)
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode) "texlab"))
  (add-to-list 'eglot-server-programs '(python-mode . ("python-language-server" ""))))
#+END_SRC
** DONE Proof Assistants
*** DONE Agda
#+begin_src elisp
(use-package agda2-mode
  :general
  (jl/major-modes
    :states '(normal visual operator)
    :keymaps 'agda2-mode-map
    "g"   '(:ignore t :which-key "goto")
    "n"   '(:ignore t :which-key "normalise")
    "x"   '(:ignore t :which-key "options")

    "?"   'agda2-show-goals
    "."   'agda2-goal-and-context-and-inferred
    ","   'agda2-goal-and-context
    ";"   'agda2-goal-and-context-and-checked
    "="   'agda2-show-constraints
    "SPC" 'agda2-give
    "RET" 'agda2-elaborate-give
    "a"   'agda2-auto-maybe-all
    "b"   'agda2-previous-goal-transient
    "c"   'agda2-make-case
    "d"   'agda2-infer-type-maybe-toplevel
    "e"   'agda2-show-context
    "f"   'agda2-next-goal-transient

    "gG"  'agda2-go-back
    "h"   'agda2-helper-function-type
    "l"   'agda2-load
    "n"   'agda2-compute-normalised-maybe-toplevel
    "o"   'agda2-module-contents-maybe-toplevel
    "r"   'agda2-refine
    "s"   'agda2-solve-maybe-all
    "t"   'agda2-goal-type

    "un"  'agda2-compute-normalised
    "uN"  'agda2-compute-normalised-toplevel

    "w"   'agda2-why-in-scope-maybe-toplevel

    "xa"  'agda2-abort
    "xc"  'agda2-compile
    "xd"  'agda2-remove-annotations
    "xh"  'agda2-display-implicit-arguments
    "xl"  'agda2-load
    "xq"  'agda2-quit
    "xr"  'agda2-restart
    "xs"  'agda2-set-program-version
    "x;"  'agda2-comment-dwim-rest-of-buffer

    "z"   'agda2-search-about-toplevel)
  :config
  (defhydra jl/agda-goal-navigation (:hint nil)
    "
^Next Goal^    ^Previous Goal
^^^--------------------------
[_f_]          [_b_]
"
    ("f" agda2-next-goal)
    ("b" agda2-previous-goal)
    ("q" nil "quit" :exit t))

  (defun agda2-next-goal-transient ()
    (interactive)
    (jl/agda-goal-navigation/body)
    (agda2-next-goal))

  (defun agda2-previous-goal-transient ()
    (interactive)
    (jl/agda-goal-navigation/body)
    (agda2-previous-goal)))
#+end_src
*** DONE Coq
#+BEGIN_SRC elisp
(use-package proof-general
  :general
  (jl/major-modes
    :keymaps 'coq-mode-map
    :states '(normal visual motion)
    :major-modes t
    ;; Basic proof management
    "]" 'proof-assert-next-command-interactive
    "[" 'proof-undo-last-successful-command
    "." 'proof-goto-point
    ;; Layout
    "l" '(:ignore t :which-key "Layout")
    "lc" 'pg-response-clear-displays
    "ll" 'proof-layout-windows
    "lp" 'proof-prf
    ;; Prover Interaction
    "p" '(:ignore t :which-key "Prover Interaction")
    "pi" 'proof-interrupt-process
    "pp" 'proof-process-buffer
    "pq" 'proof-shell-exit
    "pr" 'proof-retract-buffer
    ;; Prover queries ('ask prover')
    "a"  '(:ignore t :which-key "Ask Prover")
    "aa" 'coq-Print
    "aA" 'coq-Print-with-all
    "ab" 'coq-About
    "aB" 'coq-About-with-all
    "ac" 'coq-Check
    "aC" 'coq-Check-show-all
    "af" 'proof-find-theorems
    "aib" 'coq-About-with-implicits
    "aic" 'coq-Check-show-implicits
    "aii" 'coq-Print-with-implicits
    ;; Moving the point (goto)
    "g"  '(:ignore t :which-key "Goto")
    "ge" 'proof-goto-command-end
    "gl" 'proof-goto-end-of-locked
    "gs" 'proof-goto-command-start
    ;; Insertions
    "i"  '(:ignore t :which-key "Insert")
    "ic" 'coq-insert-command
    "ie" 'coq-end-Section
    "ii" 'coq-insert-intros
    "ir" 'coq-insert-requires
    "is" 'coq-insert-section-or-module
    "it" 'coq-insert-tactic
    "iT" 'coq-insert-tactical
    ;; Options
    "T"  '(:ignore t :which-key "Toggle")
    "Te" 'proof-electric-terminator-toggle
    "il" 'company-coq-lemma-from-goal
    "im" 'company-coq-insert-match-construct
    "ao" 'company-coq-occur

    "h"  '(:ignore t :which-key "Help")
    "he" 'company-coq-document-error
    "hE" 'company-coq-browse-error-messages
    "hh" 'company-coq-doc)
  :custom
  (proof-splash-enable nil)
  (proof-three-window-mode-policy 'hybrid))
#+END_SRC
** Programming Languages
For most programming languages, the development tools will be installed through a nix flake.
*** DONE C/C++
**** Initialisation
#+BEGIN_SRC elisp
(use-package cc-mode
  :hook ((c-mode-common . electric-pair-mode)
         (c-mode-common . electric-indent-mode)))
#+END_SRC
**** TODO clang-format
#+BEGIN_SRC elisp
(use-package clang-format
  :defer t
  :config
  (setq clang-format-style-option "llvm"))
#+END_SRC
**** TODO gendoxy
#+BEGIN_SRC elisp
(use-package gendoxy
  :straight (:host github :repo "mp81ss/gendoxy" :branch "master" :files ("*.el"))
  :general
 (jl/major-modes
   :keymaps '(c-mode-map c++-mode-map)
   :states '(normal visual operator)
   :major-modes t
   "d" '(:ignore t :which-key "doxygen")
   "dh" 'gendoxy-header
   "dt" 'gendoxy-tag
   "dT" 'gendoxy-tag-header
   "dg" 'gendoxy-group
   "dG" 'gendoxy-group-header
   "ds" 'gendoxy-group-start
   "de" 'gendoxy-group-end)
  :defer t)
#+END_SRC
**** CANCELLED r-tags
#+BEGIN_SRC elisp :tangle no
(use-package rtags
    :defer t)
#+END_SRC
*** DONE C#
#+BEGIN_SRC elisp
(use-package csharp-mode
  :defer t
  :config
  (setq lsp-csharp-server-path (executable-find "omnisharp"))
  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))

(use-package omnisharp
  :defer t)

(use-package tree-sitter
  :defer t)
(use-package tree-sitter-langs
  :defer t)
(use-package tree-sitter-indent
  :defer t)
#+END_SRC
*** DONE Elm
#+BEGIN_SRC elisp
(use-package elm-mode
  :general
  (jl/major-modes
    :keymaps 'elm-mode-map
    :states '(normal visual operator)
    :major-modes t
    "m" '(:ignore t :which-key "make")
    "s" '(:ignore t :which-key "repl")
    "r" '(:ignore t :which-key "reactor")
    "p" '(:ignore t :which-key "package")

    "mc" 'elm-compile-buffer
    "mm" 'elm-compile-main
    "ma" 'elm-compile-add-annotations
    "mr" 'elm-compile-clean-imports

    "sl" 'elm-repl-load
    "sp" 'elm-repl-push
    "se" 'elm-repl-push-decl

    "rn" 'elm-preview-buffer
    "rm" 'elm-preview-main

    "pd" 'elm-documentation-lookup
    "pi" 'elm-import
    "ps" 'elm-sort-imports
    "pk" 'elm-package-catalog
    "pK" 'elm-package-refresh-contents)
  :config
  (when (executable-find "elm-format")
    (jl/major-modes
      :keymaps 'elm-mode-map
      :states '(normal visual operator)
      :major-modes t
      "f" 'elm-format-buffer))
  (when (executable-find "elm-test")
    (jl/major-modes
      :keymaps 'elm-mode-map
      :states '(normal visual operator)
      :major-modes t
      "v" 'elm-test-project)))
#+END_SRC
*** DONE Haskell
**** lsp-haskell
#+begin_src elisp
(use-package lsp-haskell
  :defer t
  :custom
  (lsp-haskell-server-path "haskell-language-server-wrapper")
  (lsp-haskell-server-args ()))
#+end_src
**** DONE Keybindings
#+begin_src elisp
(defun jl/haskell-keys ()
  (jl/major-modes
    :keymaps 'haskell-mode-map
    :states '(normal visual operator)
    :major-modes t
    "g" '(:ignore t :which-key "navigation")
    "s" '(:ignore t :which-key "repl")
    "c" '(:ignore t :which-key "cabal")
    "h" '(:ignore t :which-key "documentation")
    "d" '(:ignore t :which-key "debug")
    "r" '(:ignore t :which-key "refactor"))

  (jl/major-modes
    :keymaps 'haskell-mode-map
    :states '(normal visual operator)
    :major-modes t
    "'" 'haskell-interactive-switch
    "S" 'haskell-mode-stylish-buffer

    "sb"  'haskell-process-load-file
    "sc"  'haskell-interactive-mode-clear
    "sS"  'spacemacs/haskell-interactive-bring
    "ss"  'haskell-interactive-switch
    "st"  'haskell-session-change-target
    "'"   'haskell-interactive-switch

    "ca"  'haskell-process-cabal
    "cb"  'haskell-process-cabal-build
    "cc"  'haskell-compile
    "cv"  'haskell-cabal-visit-file

    "hd"  'inferior-haskell-find-haddock
    "hg"  'hoogle
    "hG"  'haskell-hoogle-lookup-from-local
    "hi"  'haskell-process-do-info
    "ht"  'haskell-process-do-type
    "hT"  'haskell-process-do-type-on-prev-line

    "da"  'haskell-debug/abandon
    "db"  'haskell-debug/break-on-function
    "dB"  'haskell-debug/delete
    "dc"  'haskell-debug/continue
    "dd"  'haskell-debug
    "dn"  'haskell-debug/next
    "dN"  'haskell-debug/previous
    "dp"  'haskell-debug/previous
    "dr"  'haskell-debug/refresh
    "ds"  'haskell-debug/step
    "dt"  'haskell-debug/trace

    "ri"  'haskell-format-imports)

  (general-define-key
   :states '(normal insert visual)
   :keymaps 'haskell-interactive-mode-map
   "C-j" 'haskell-interactive-mode-history-next
   "C-k" 'haskell-interactive-mode-history-previous
   "C-l" 'haskell-interactive-mode-clear)

  (jl/major-modes
    :states '(normal visual)
    :keymaps 'haskell-cabal-mode-map
    :major-modes t
    "d"   'haskell-cabal-add-dependency
    "b"   'haskell-cabal-goto-benchmark-section
    "e"   'haskell-cabal-goto-executable-section
    "t"   'haskell-cabal-goto-test-suite-section
    "m"   'haskell-cabal-goto-exposed-modules
    "l"   'haskell-cabal-goto-library-section
    "n"   'haskell-cabal-next-subsection
    "p"   'haskell-cabal-previous-subsection
    "N"   'haskell-cabal-next-section
    "P"   'haskell-cabal-previous-section
    "f"   'haskell-cabal-find-or-create-source-file))
#+end_src
**** DONE Initialisation
#+begin_src elisp
(use-package haskell-mode
  :hook ((haskell-mode . auto-fill-mode))
  :general
  ;; (:keymaps 'haskell-mode-map
  ;;           :states 'normal
  ;;           "o" 'haskell-indentation-newline-and-indent)
  :init
  ;; ;; To get evil's "o" and "O" keys to work with indentation as expected, we use these two functions from [[https://github.com/haskell/haskell-mode/issues/1265#issuecomment-252492026][hatashiro]].
  ;; (defun haskell-evil-open-above ()
  ;;   (interactive)
  ;;   (evil-digit-argument-or-evil-beginning-of-line)
  ;;   (haskell-indentation-newline-and-indent)
  ;;   (evil-previous-line)
  ;;   (haskell-indentation-indent-line)
  ;;   (evil-append-line nil))

  ;; (defun haskell-evil-open-below ()
  ;;   (interactive)
  ;;   (evil-append-line nil)
  ;;   (haskell-indentation-newline-and-indent))

  ;; (defun haskell-format-imports ()
  ;;   "Sort and align import statements from anywhere in the source file."
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (haskell-navigate-imports)
  ;;     (haskell-mode-format-imports)))

  ;; (defun haskell-process-do-type-on-prev-line ()
  ;;   (interactive)
  ;;   (haskell-process-do-type 1))
  (remove-hook 'haskell-mode-hook 'electric-indent-mode)
  :config
  (jl/haskell-keys)
  :custom
  (haskell-process-type 'auto))
#+end_src
**** hindent
#+begin_src elisp
(use-package hindent
  :after haskell-mode
  :general
  (jl/major-modes
    :states '(normal visual operator)
    :keymaps 'haskell-mode-map
    :major-modes t
    "f" '(:ignore nil :which-key "format")
    "fB" 'hindent-reformat-buffer
    "fd" 'hindent-reformat-decl
    "ff" 'hindent-reformat-decl-or-fill
    "fr" 'hindent-reformat-region)
  :hook (haskell-mode . hindent-mode))
#+end_src
**** DONE hlint-refactor
#+begin_src elisp
(use-package hlint-refactor
  :hook (haskell-mode . hlint-refactor-mode)
  :general
  (jl/major-modes
    :states '(normal visual)
    :keymaps 'haskell-mode-map
    :major-modes t
    "rb" 'hlint-refactor-refactor-buffer
    "rr" 'hlint-refactor-refactor-at-point))
#+end_src
*** DONE Lisps
**** TODO Common Lisp
***** Slime
#+BEGIN_SRC elisp
(use-package slime
  :defer t
  :init
  (setq inferior-lisp-program "sbcl")
  :general
  (jl/major-modes
    :keymaps 'lisp-mode-map
    :states '(normal visual operator)
    :major-modes t
    "h" '(:ignore t :which-key "help")
    "e" '(:ignore t :which-key "eval")
    "s" '(:ignore t :which-key "repl")
    "c" '(:ignore t :which-key "compile")
    "g" '(:ignore t :which-key "nav")
    "m" '(:ignore t :which-key "macro")
    "t" '(:ignore t :which-key "toggle")
    "'" 'slime

    "cc" 'slime-compile-file
    "cC" 'slime-compile-and-load-file
    "cl" 'slime-load-file
    "cf" 'slime-compile-defun
    "cr" 'slime-compile-region
    "cn" 'slime-remove-notes

    "eb" 'slime-eval-buffer
    "ef" 'slime-eval-defun
    "eF" 'slime-undefine-function
    "ee" 'slime-eval-last-expression
    "el" 'spacemacs/slime-eval-sexp-end-of-line
    "er" 'slime-eval-region

    "gb" 'slime-pop-find-definition-stack
    "gn" 'slime-next-note
    "gN" 'slime-previous-note

    "ha" 'slime-apropos
    "hA" 'slime-apropos-all
    "hd" 'slime-disassemble-symbol
    "hh" 'slime-describe-symbol
    "hH" 'slime-hyperspec-lookup
    "hi" 'slime-inspect-definition
    "hp" 'slime-apropos-package
    "ht" 'slime-toggle-trace-fdefinition
    "hT" 'slime-untrace-all
    "h<" 'slime-who-calls
    "h>" 'slime-calls-who
    ;; TODO: Add key bindings for who binds/sets globals?
    "hr" 'slime-who-references
    "hm" 'slime-who-macroexpands
    "hs" 'slime-who-specializes

    "ma" 'slime-macroexpand-all
    "mo" 'slime-macroexpand-1

    "se" 'slime-eval-last-expression-in-repl
    "si" 'slime
    "sq" 'slime-quit-lisp

    "tf" 'slime-toggle-fancy-trace))
#+END_SRC
***** TODO evil-lisp-state
#+BEGIN_SRC elisp :tangle no
(use-package evil-lisp-state
  :defer t
  :config
  (evil-lisp-state-leader ",,"))
#+END_SRC
***** evil-cleverparens
#+BEGIN_SRC elisp
(use-package evil-cleverparens
  :hook ((common-lisp-mode emacs-lisp-mode) . evil-cleverparens-mode)
  :defer t)
#+END_SRC
**** DONE Emacs Lisp
***** DONE Global bindings
#+BEGIN_SRC elisp
(jl/SPC-keys
  "e"  '(:ignore t :which-key "elisp")
  "er" 'eval-region
  "eb" 'eval-buffer)

(add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
#+END_SRC
***** DONE Ielm
#+BEGIN_SRC elisp
(use-package ielm
  :general
  (jl/major-modes
    :states '(normal operator motion)
    :keymaps 'inferior-emacs-lisp-mode-map
    :major-modes t
    "hh" 'helpful-at-point)

  (jl/major-modes
    :states '(normal operator motion)
    :keymaps 'emacs-lisp-mode-map
    :major-modes t
    "s" '(:ignore t :which-key "ielm")
    "'" 'ielm
    "si" 'ielm))
#+END_SRC
***** DONE Debug
#+BEGIN_SRC elisp
(use-package debug
  :defer t)

(use-package edebug
  :general
  (jl/major-modes
    :keymaps 'edebug-eval-mode-map
    :states '(normal visual operator)
    :major-modes t
    "g" '(:ignore t :which-key "goto")
    "e" '(:ignore t :which-key "eval")
    "gw" 'edebug-where
    "a" 'edebug-delete-eval-item
    "k" 'edebug-delete-eval-item
    "," 'edebug-update-eval-list
    "c" 'edebug-update-eval-list
    "ee" 'edebug-eval-last-sexp
    "eE" 'edebug-eval-print-last-sexp))
#+END_SRC
*** DONE Shell
**** DONE Initialisation
#+BEGIN_SRC elisp
(use-package sh-script
  :defer t
  :mode ("\\.sh\\'"
	 "\\.zsh\\'"
         "zlogin\\'"
         "zlogout\\'"
         "zpreztorc\\'"
         "zprofile\\'"
         "zshenv\\'"
         "zshrc\\'")
  :general
  (jl/major-modes
    :keymaps 'sh-mode-map
    :states '(normal visual operator)
    :major-modes t
    "i" '(:ignore t :which-key "insert")
    "g" '(:ignore t :which-key "goto")

    "\\" 'sh-backslash-region
    "ic" 'sh-case
    "ii" 'sh-if
    "if" 'sh-function
    "io" 'sh-for
    "ie" 'sh-indexed-loop
    "iw" 'sh-while
    "ir" 'sh-repeat
    "is" 'sh-select
    "iu" 'sh-until
    "ig" 'sh-while-getopts))
  #+END_SRC
**** DONE Shfmt
Requires shfmt installed on system.
#+BEGIN_SRC elisp
(use-package shfmt
  :hook (sh-mode . shfmt-on-save-mode)
  :general
  (jl/major-modes
    :keymaps 'sh-mode-map
    :states '(normal visual operator)
    :major-modes t
    "=" 'shfmt-buffer))
#+END_SRC
**** DONE Insert Shebang
Not tested. Probably doesn't work.
#+BEGIN_SRC elisp :tangle no
(use-package insert-shebang
  :defer t
  :hook (sh-mode . insert-shebang-mode)
  :general
  (jl/major-modes
    :keymaps 'sh-mode-map
    :states '(normal visual operator)
    :major-modes t
    "i!" 'insert-shebang))
#+END_SRC
*** DONE Nix
**** Functions
#+BEGIN_SRC elisp
(defun find-nixos-configuration ()
  "Edit the `dotfile', in the current window."
  (interactive)
  (find-file-existing "/etc/nixos/configuration.nix"))

(defun find-homemanager-configuration ()
  "Edit the `dotfile', in the current window."
  (interactive)
  (find-file-existing "~/.config/nixpkgs/home.nix"))
#+END_SRC
**** nix-mode
#+begin_src elisp
(use-package nix-mode
  :general
  (jl/major-modes
    :keymaps 'nix-mode-map
    :states '(normal visual motion)
    :major-modes t
    "=" 'nix-format-buffer)
  (jl/SPC-keys
    :states '(normal visual motion)
    "n"    '(:ignore t :which-key "nix")
    "nf"   '(:ignore t :which-key "flakes")
    "nfi"  '(:ignore t :which-key "init")
    "nf."  'nix-flake-dispatch
    "nff"  'nix-flake
    "nfr"  'nix-flake-run-default
    "nfR"  'nix-flake-run-attribute

    "nfii" 'nix-flake-init
    "nfiI" 'nix-flake-init-dispatch
    "nfir" 'nix-flake-init:from-registry
    "nfit" 'nix-flake-init-select-template
    "nfid" 'nix-flake-init:default-templates

    "nfl"  'nix-flake-lock
    "nfc"  'nix-flake-check
    "nfu"  'nix-flake-update
    "nfb"  'nix-flake-build-default
    "nfB"  'nix-flake-build-attribute

    "nr"   'nix-repl
    "ns"   'nix-shell
    "ne"   'nix-eshell
    "nS"   'nix-search
    "nc"   'nix-compile
    "ng"   'nix-shell-build
    "nC"   'nix-clear-caches
    "nu"   'nix-shell-unpack
    "nU"   'nix-shell-configure)
  :mode "\\.nix\\'")
#+END_SRC
**** nixos-options
#+BEGIN_SRC elisp
(use-package nixos-options
  :defer t)
#+END_SRC
**** Nix-sandbox
#+BEGIN_SRC elisp
(use-package nix-sandbox
  :defer t
  :custom
  (haskell-process-wrapper-function (lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args)))
  (flycheck-command-wrapper-function (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command)))
  (flycheck-executable-find (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd))))
#+end_src
*** DONE Java
**** lsp-java
We actually install the language server through Emacs, so we don't need to worry about that - only where we store it.
#+BEGIN_SRC elisp
(use-package lsp-java
  :defer t
  :hook (java-mode . (lambda ()
                       (require 'lsp-java)
                       (setq lsp-java-server-install-dir "~/emacs-packages/java-language-server/"))))
#+END_SRC
*** DONE Python
**** Python LSP
We need a function to find the lsp server when it's installed through a nix shell.
#+BEGIN_SRC elisp
(use-package lsp-python-ms
  :defer t
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms))))
#+END_SRC
**** python-mode
#+BEGIN_SRC elisp
(use-package python-mode
  :defer t
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")
  :config
  (defun lspython ()
    "Updates the lsp-python-ms-executable variable and runs lsp."
    (interactive)
    (setq lsp-python-ms-executable (executable-find "python-language-server"))
    (lsp-deferred)))
#+END_SRC
**** ipython-shell-send
#+BEGIN_SRC elisp
(use-package ipython-shell-send
  :general
  (jl/major-modes
    :keymaps 'python-mode-map
    :states '(normal visual operator)
    :major-modes t
    "'" 'run-python
    "sb" 'ipython-shell-send-buffer
    "sr" 'ipython-shell-send-region
    "sd" 'ipython-shell-send-defun))
#+END_SRC
**** Blacken
#+BEGIN_SRC elisp
(use-package blacken
  :defer t
  :hook (python-mode . blacken-mode))
#+END_SRC
** TODO Text
*** Org mode
**** DONE Functions
#+begin_src elisp
(defun org-link ()
  (interactive)
  (if (string= (car (org-thing-at-point)) "link")
      (org-return)
    (evil-ret)))

(defun org-bold ()
  (interactive)
  (org-emphasize ?\*)
  )

(defun org-italic ()
  (interactive)
  (org-emphasize ?\/)
  )

(defun org-underline ()
  (interactive)
  (org-emphasize ?\_)
  )

(defun org-code ()
  (interactive)
  (org-emphasize ?\~)
  )

(defun org-strike-through ()
  (interactive)
  (org-emphasize ?\+)
  )

(defun org-verbatim ()
  (interactive)
  (org-emphasize ?\=)
  )
#+end_src
**** DONE Key bindings
#+begin_src elisp
(defun jl/org-mode-key-bindings ()
  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual motion)
   "RET" 'org-open-at-point ;; Allows links to be opened with RET
   "$"   'end-of-line       ;; Evil-org changes this behaviour. This changes it back.
   "0"   'beginning-of-line)

  (jl/major-modes
    :states '(normal visual)
    :keymaps 'org-mode-map
    :major-modes '(org-mode t)
    "b" '(:ignore t :which-key "Babel")
    "d" '(:ignore t :which-key "Dates")
    "e" '(:ignore t :which-key "Export")
    "f" '(:ignore t :which-key "Feeds")
    "i" '(:ignore t :which-key "Insert")
    "iD" '(:ignore t :which-key "Download")
    "m" '(:ignore t :which-key "More")
    "s" '(:ignore t :which-key "Trees/Subtrees")
    "T" '(:ignore t :which-key "Toggles")
    "t" '(:ignore t :which-key "Tables")
    "td" '(:ignore t :which-key "Delete")
    "ti" '(:ignore t :which-key "Insert")
    "tt" '(:ignore t :which-key "Toggle")
    "C" '(:ignore t :which-key "Clocks")
    "x" '(:ignore t :which-key "Text")

    "'" 'org-edit-special
    "c" 'org-capture

    ;; Clock
    ;; These keybindings should match those under the "aoC" prefix (below)
    "Cc" 'org-clock-cancel
    "Cd" 'org-clock-display
    "Ce" 'org-evaluate-time-range
    "Cg" 'org-clock-goto
    "Ci" 'org-clock-in
    "CI" 'org-clock-in-last
    ;; "Cj" 'spacemacs/org-clock-jump-to-current-clock
    "Co" 'org-clock-out
    "CR" 'org-clock-report
    "Cr" 'org-resolve-clocks

    "dd" 'org-deadline
    "ds" 'org-schedule
    "dt" 'org-time-stamp
    "dT" 'org-time-stamp-inactive
    "ee" 'org-export-dispatch
    "fi" 'org-feed-goto-inbox
    "fu" 'org-feed-update-all

    "a" 'org-agenda

    "p" 'org-priority

    "Tc" 'org-toggle-checkbox
    "Te" 'org-toggle-pretty-entities
    "Ti" 'org-toggle-inline-images
    "Tn" 'org-num-mode
    "Tl" 'org-toggle-link-display
    "Tt" 'org-show-todo-tree
    "TT" 'org-todo
    "TV" 'space-doc-mode
    "Tx" 'org-latex-preview

    ;; More cycling options (timestamps, headlines, items, properties)
    "L" 'org-shiftright
    "H" 'org-shiftleft
    "J" 'org-shiftdown
    "K" 'org-shiftup

    ;; Change between TODO sets
    "C-S-l" 'org-shiftcontrolright
    "C-S-h" 'org-shiftcontrolleft
    "C-S-j" 'org-shiftcontroldown
    "C-S-k" 'org-shiftcontrolup

    ;; Subtree editing
    "sa" 'org-toggle-archive-tag
    "sA" 'org-archive-subtree-default
    "sb" 'org-tree-to-indirect-buffer
    "sd" 'org-cut-subtree
    "sy" 'org-copy-subtree
    "sh" 'org-promote-subtree
    "sj" 'org-move-subtree-down
    "sk" 'org-move-subtree-up
    "sl" 'org-demote-subtree
    "sn" 'org-narrow-to-subtree
    "sw" 'widen
    "sr" 'org-refile
    "ss" 'org-sparse-tree
    "sS" 'org-sort

    ;; tables
    "ta" 'org-table-align
    "tb" 'org-table-blank-field
    "tc" 'org-table-convert
    "tdc" 'org-table-delete-column
    "tdr" 'org-table-kill-row
    "te" 'org-table-eval-formula
    "tE" 'org-table-export
    "tf" 'org-table-field-info
    "th" 'org-table-previous-field
    "tH" 'org-table-move-column-left
    "tic" 'org-table-insert-column
    "tih" 'org-table-insert-hline
    "tiH" 'org-table-hline-and-move
    "tir" 'org-table-insert-row
    "tI" 'org-table-import
    "tj" 'org-table-next-row
    "tJ" 'org-table-move-row-down
    "tK" 'org-table-move-row-up
    "tl" 'org-table-next-field
    "tL" 'org-table-move-column-right
    "tn" 'org-table-create
    "tN" 'org-table-create-with-table.el
    "tr" 'org-table-recalculate
    "tR" 'org-table-recalculate-buffer-tables
    "ts" 'org-table-sort-lines
    "ttf" 'org-table-toggle-formula-debugger
    "tto" 'org-table-toggle-coordinate-overlays
    "tw" 'org-table-wrap-region

    ;; Source blocks / org-babel
    "bp"     'org-babel-previous-src-block
    "bn"     'org-babel-next-src-block
    "be"     'org-babel-execute-maybe
    "bo"     'org-babel-open-src-block-result
    "bv"     'org-babel-expand-src-block
    "bu"     'org-babel-goto-src-block-head
    "bg"     'org-babel-goto-named-src-block
    "br"     'org-babel-goto-named-result
    "bb"     'org-babel-execute-buffer
    "bs"     'org-babel-execute-subtree
    "bd"     'org-babel-demarcate-block
    "bt"     'org-babel-tangle
    "bf"     'org-babel-tangle-file
    "bc"     'org-babel-check-src-block
    "bj"     'org-babel-insert-header-arg
    "bl"     'org-babel-load-in-session
    "bi"     'org-babel-lob-ingest
    "bI"     'org-babel-view-src-block-info
    "bz"     'org-babel-switch-to-session
    "bZ"     'org-babel-switch-to-session-with-code
    "ba"     'org-babel-sha1-hash
    "bx"     'org-babel-do-key-sequence-in-edit-buffer
    ;; "b."     'spacemacs/org-babel-transient-state/body
    ;; Multi-purpose keys
    "," 'org-ctrl-c-ctrl-c
    "*" 'org-ctrl-c-star
    "-" 'org-ctrl-c-minus
    "#" 'org-update-statistics-cookies
    "RET"   'org-ctrl-c-ret
    "M-RET" 'org-meta-return
    ;; attachments
    "A" 'org-attach
    ;; insertion
    "ib" 'org-insert-structure-template
    "id" 'org-insert-drawer
    "ie" 'org-set-effort
    "if" 'org-footnote-new
    "ih" 'org-insert-heading
    "iH" 'org-insert-heading-after-current
    "ii" 'org-insert-item
    ;; "iK" 'spacemacs/insert-keybinding-org
    "il" 'org-insert-link
    "in" 'org-add-note
    "ip" 'org-set-property
    "is" 'org-insert-subheading
    "it" 'org-set-tags-command
    ;; region manipulation
    "xb" 'org-bold
    "xc" 'org-code
    "xi" 'org-italic
    "xo" 'org-open-at-point
    ;; "xr" (spacemacs|org-emphasize spacemacs/org-clear ? )
    "xs" 'org-strike-through
    "xu" 'org-underline
    "xv" 'org-verbatim)


  (evil-define-minor-mode-key 'normal 'org-src-mode ",c" 'org-edit-src-exit)
  (evil-define-minor-mode-key 'visual 'org-src-mode ",c" 'org-edit-src-exit)

  (evil-define-minor-mode-key 'normal 'org-src-mode ",," 'org-edit-src-exit)
  (evil-define-minor-mode-key 'visual 'org-src-mode ",," 'org-edit-src-exit)

  (evil-define-minor-mode-key 'normal 'org-src-mode ",a" 'org-edit-src-abort)
  (evil-define-minor-mode-key 'visual 'org-src-mode ",a" 'org-edit-src-abort)

  (evil-define-minor-mode-key 'normal 'org-capture-mode ",," 'org-capture-finalize)
  (evil-define-minor-mode-key 'visual 'org-capture-mode ",," 'org-capture-finalize)

  (evil-define-minor-mode-key 'normal 'org-capture-mode ",a" 'org-capture-kill)
  (evil-define-minor-mode-key 'visual 'org-capture-mode ",a" 'org-capture-kill))
#+end_src
#+begin_src elisp
  ;; Add global evil-leader mappings. Used to access org-agenda
  ;; functionalities – and a few others commands – from any other mode.
(defun jl/org-mode-global-keys ()
  (jl/SPC-keys
   "ao" '(:ignore t :which-key "org")
   "aoC" '(:ignore t :which-key "clocks")
   "aof" '(:ignore t :which-key "feeds")

   "ao#" 'org-agenda-list-stuck-projects
   "aoa" 'org-agenda-list
   "aoo" 'org-agenda
   "aoc" 'org-capture
   "aoe" 'org-store-agenda-views
   "aofi" 'org-feed-goto-inbox
   "aofu" 'org-feed-update-all

   ;; Clock
   ;; These keybindings should match those under the "mC" prefix (above)
   "aoCc" 'org-clock-cancel
   "aoCg" 'org-clock-goto
   "aoCi" 'org-clock-in
   "aoCI" 'org-clock-in-last
   ;; "aoCj" 'spacemacs/org-clock-jump-to-current-clock
   "aoCo" 'org-clock-out
   "aoCr" 'org-resolve-clocks

   "aol" 'org-store-link
   "aom" 'org-tags-view
   "aos" 'org-search-view
   "aot" 'org-todo-list
   ;; SPC C- capture/colors
   "Cc" 'org-capture))

(defun jl/org-mode-Cc-keys ()
  (jl/C-c-keys
    "a" 'org-agenda
    "c" 'org-capture
    "l" 'org-store-link))
#+end_src
**** DONE Font configuration
#+begin_src elisp
(defun jl/org-font-setup ()
  (dolist (face '((org-document-title . 1.5)
		  (org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1))
		)
    (set-face-attribute (car face) nil :family jl/prog-font :weight 'regular :height (cdr face))
    (set-face-attribute 'org-link nil :weight 'regular)
    )

  ;; (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-block nil :inherit 'fixed-pitch)

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch :family jl/prog-font)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch) :family jl/prog-font)
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch) :family jl/prog-font)
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch) :family jl/prog-font)
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch) :family jl/prog-font)
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch) :family jl/prog-font)
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch :family jl/prog-font)
  (set-face-attribute 'org-latex-and-related nil :inherit 'fixed-pitch :family jl/prog-font)
  )
  #+end_src
**** DONE Latex previews
#+BEGIN_SRC elisp
(defun jl/org-luasvg ()
  "Sets up luasvg as a way to render latex fragments"
  (setq luasvg '(luasvg :programs ("lualatex" "dvisvgm")
                        :description "dvi > svg"
                        :message "you need to install lualatex and dvisvgm."
                        :image-input-type "dvi"
                        :image-output-type "svg"
                        :image-size-adjust (1.0 . 1.0)
                        :latex-compiler ("lualatex --interaction=nonstopmode --shell-escape --output-format=dvi --output-directory=%o %f")
                        :image-converter ("dvisvgm %f -n -b min -c %S -o %O")))

  (add-to-list 'org-preview-latex-process-alist luasvg))
#+END_SRC
**** DONE Initialisation
#+begin_src elisp
(use-package org
  :defer t
  :hook ((org-mode . jl/org-font-setup))
  :init
  (jl/org-mode-Cc-keys)
  (jl/org-mode-global-keys)
  :config
  (setq
   org-format-latex-options (plist-put org-format-latex-options :background "Transparent")
   org-ellipsis " ▼"  ;; Change folded header ellipsis
   org-todo-keywords '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED"))
   org-todo-keyword-faces '(("WAITING" . "aquamarine1") ("CANCELLED" . "red"))
   org-startup-indented t
   org-display-remote-inline-images 'download
   org-hide-emphasis-markers nil
   org-src-tab-acts-natively t
   org-pretty-entities nil
   org-startup-folded t
   org-hide-block-startup t
   org-edit-src-content-indentation 0
   org-startup-with-latex-preview t
   org-enable-reveal-js-support t
   org-protocol-default-template-key "w"
   org-image-actual-width nil
   org-re-reveal-root "file:///home/james/emacs-packages/reveal.js"
   org-preview-latex-image-directory "~/Documents/Org/ltximg/"
   org-export-backends '(ascii beamer html icalendar latex md odt)
   ;; Latex in Org
   org-preview-latex-default-process 'luasvg
   org-latex-compiler "lualatex"
   org-highlight-latex-and-related '(latex script entities))

  (jl/org-mode-key-bindings)
  (jl/org-font-setup)
  (jl/org-luasvg)
  (add-to-list 'org-file-apps '("\\.pdf" . "zathura %s"))
  :custom
  (org-agenda-files '("~/Documents/Calendar/Agenda.org"))
  ;;                     ;; "~/Documents/Org/GTD/inbox.org"
  ;;                     ;; "~/Documents/Org/GTD/gtd.org"
  ;;                     ;; "~/Documents/Org/GTD/tickler.org"
  ;;                     ;; "~/Documents/Org/GTD/Mobile Inbox.org"
  ;;                     ))
  ;; (org-format-latex-options '(:foreground auto :background "Transparent"))
  ;; Org capture
  (org-capture-templates
   '(("t" "Todo [inbox]" entry
      (file+headline "~/Documents/Org/GTD/inbox.org" "Tasks")
      "* TODO %i%?")

     ("T" "Tickler" entry
      (file+headline "~/Documents/Org/GTD/tickler.org" "Tickler")
      "* %i%? \n %U")
     ("n" "Notes" entry
      (file "~/Documents/Org/Notes/notes.org")
      "* %?")
     ("r" "Research Notes" entry
      (file "~/Documents/Org/Research/notes.org")
      "* %u \n %?")
     ("w" "org-protocol" entry (file "~/Documents/Org/GTD/inbox.org")
      "* TODO Review %a\n%U\n%:initial\n" :immediate-finish t)
     ))
  ;; GTD in org
  (org-refile-targets '(("~/Documents/Org/GTD/gtd.org" :maxlevel . 3)
                        ("~/Documents/Org/GTD/someday.org" :level . 1)
                        ("~/Documents/Org/GTD/tickler.org" :maxlevel . 2))))
#+end_src
**** DONE Org Roam
***** Functions
#+BEGIN_SRC elisp
(defun org-roam-force-rebuild-cache ()
  "Rebuild the `org-mode' and `org-roam' cache."
  (interactive)
  (org-id-update-id-locations)
  ;; Note: you may need `org-roam-db-clear-all'
  ;; followed by `org-roam-db-sync'
  (org-roam-db-sync)
  (org-roam-update-org-id-locations))
#+END_SRC
***** Keybindings
#+begin_src elisp
(defun jl/org-roam-global-keys ()
  (jl/SPC-keys
    "aor" '(:ignore t :which-key "org-roam")
    "aord" '(:ignore t :which-key "dailies")
    "aort" '(:ignore t :which-key "tags")

    "aordy" 'org-roam-dailies-goto-yesterday
    "aordt" 'org-roam-dailies-goto-today
    "aordT" 'org-roam-dailies-goto-tomorrow
    "aordd" 'org-roam-dailies-goto-date
    "aorh" 'org-roam-force-rebuild-cache
    "aorf" 'org-roam-node-find
    "aorn" 'org-roam-node-find
    "aorg" 'org-roam-ui-open
    "aori" 'org-roam-node-insert
    "aorl" 'org-roam-buffer-toggle
    "aorta" 'org-roam-tag-add
    "aortr" 'org-roam-tag-remove
    "aora" 'org-roam-alias-add
    "aorI" 'org-id-get-create
    )
  )

(defun jl/org-roam-key-bindings ()
  (jl/major-modes
    :states '(normal visual motion)
    :keymaps 'org-mode-map
    :major-modes t

    "r" '(:ignore t :which-key "org-roam")
    "rd" '(:ignore t :which-key "dailies")
    "rt" '(:ignore t :which-key "tags")
    "rdy" 'org-roam-dailies-goto-yesterday
    "rdt" 'org-roam-dailies-goto-today
    "rdT" 'org-roam-dailies-goto-tomorrow
    "rdd" 'org-roam-dailies-goto-date
    "rf" 'org-roam-node-find
    "rh" 'org-roam-force-rebuild-cache
    "rn" 'org-roam-node-find
    "rg" 'org-roam-ui-open
    "ri" 'org-roam-node-insert
    "rl" 'org-roam-buffer-toggle
    "rta" 'org-roam-tag-add
    "rtr" 'org-roam-tag-remove
    "ra" 'org-roam-alias-add
    "rI" 'org-id-get-create
    )
  )

#+end_src
***** Templates
#+BEGIN_SRC elisp
(defun jl/org-roam-templates ()
  (setq org-roam-capture-templates
	'(("q" "quick note" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)

	  ("e" "encrypted note" plain
	   "%?"
	   :if-new (file+head "./encrypted/%<%Y%m%d%H%M%S>-${slug}.org.gpg" "#+title: ${title}\n")
	   :unnarrowed t)

	  ("m" "mathematics note" plain
	   "#+LATEX_HEADER: \\input{org-math-packages.tex} \\usepackage{math-macros} \\usepackage{math-environments}\n\n* %?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)

	  ("f" "film note" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :films:\n[[id:352cef44-05f6-494c-8f65-c04241335eb0][Films]]\n* %?")
	   :unnarrowed t)
	  )))

(defun jl/org-roam-daily-templates ()
  (setq org-roam-dailies-capture-templates
	'(("d" "default" entry
	   "* %?"
	   :target (file+head "%<%Y-%m-%d>.org"
			      "#+title: %<%Y-%m-%d>\n#+filetags: :Daily:\n [[id:24a82cf2-bc51-4b01-81f7-53968e483ee2][Daily Journal]]\n* [/] Daily Todos\n1. [ ]\n2. [ ]\n3. [ ]\n* Daily Tasks\n* Morning Thoughts\n* Evening Reflections")))))
#+END_SRC
***** Initialisation
#+begin_src elisp
(use-package org-roam
  :defer t
  :commands (org-roam-node-find
             org-roam-dailies-goto-date
             org-roam-dailies-goto-today
             org-roam-dailies-goto-tomorrow
             org-roam-dailies-goto-yesterday)
  :custom
  (org-roam-v2-ack t)
  (org-roam-graph-viewer #'browse-url-firefox)
  (org-roam-directory "/home/james/Documents/Roam/")
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags}" 'face 'org-tag)))
  :init
  (jl/org-roam-global-keys)
  :config
  (add-to-list 'org-agenda-files "~/Documents/Roam/daily")
  (jl/org-roam-daily-templates)
  (jl/org-roam-templates)
  (org-roam-db-autosync-mode)
  (jl/org-roam-key-bindings)
  )
#+end_src
***** Org Roam UI
****** Initialisation
#+begin_src elisp
(use-package org-roam-ui
  :defer t
  :commands (org-roam-ui-mode
	     org-roam-ui-open)
  :after org-roam)
  #+end_src
***** Org Roam BibTeX
#+begin_src elisp
(use-package org-roam-bibtex
  :after (org-roam)
  :defer t
  :hook (org-roam-mode . org-roam-bibtex-mode)
  )
#+end_src
***** Org Roam Protocol
#+begin_src elisp
(use-package org-roam-protocol
  :defer t
  :straight org-roam)
#+end_src
**** DONE Org mode minor modes
#+begin_src elisp :tangle no
(defun jl/org-mode-setup ()
  (visual-line-mode 1)
  ;; (variable-pitch-mode 1)
  (smartparens-mode 1)
  (org-fragtog-mode 1)
  (rainbow-delimiters-mode 1)
  )
  #+end_src
#+begin_src elisp
(use-package org-superstar
  :defer t
  :after org
  :hook (org-mode . org-superstar-mode)
  )

(defun jl/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . jl/org-mode-visual-fill))

(use-package org-fragtog
  :defer t
  :after org
  :hook (org-mode . org-fragtog-mode)
  )
#+end_src
**** Org Babel
Calling org-babel languages in the following form saves a lot on startup time.
***** Shell
#+BEGIN_SRC elisp
(use-package ob-shell
  :straight org
  :commands
  (org-babel-execute:sh
   org-babel-expand-body:sh

   org-babel-execute:bash
   org-babel-expand-body:bash)
  :config
  (add-to-list 'org-babel-load-languages '(shell . t)))
#+END_SRC
***** Python
#+BEGIN_SRC elisp
(use-package ob-python
  :straight org
  :commands
  (org-babel-execute:python
   org-babel-expand-body:python))
#+END_SRC
***** Emacs Lisp
#+BEGIN_SRC elisp
(use-package ob-emacs-lisp
  :straight org
  :commands
  (org-babel-execute:emacs-lisp
   org-babel-expand-body:emacs-lisp
   org-babel-execute:elisp
   org-babel-expand-body:elisp))
#+END_SRC
***** JS
#+BEGIN_SRC elisp
(use-package ob-js
  :straight org
  :commands
  (org-babel-execute:js
   org-babel-expand-body:js))
#+END_SRC
***** LaTeX
#+BEGIN_SRC elisp
(use-package ob-latex
  :straight org
  :commands
  (org-babel-execute:latex
   org-babel-expand-body:latex))
#+END_SRC
***** Haskell
#+BEGIN_SRC elisp
(use-package ob-haskell
  :straight org
  :commands
  (org-babel-execute:haskell
   org-babel-expand-body:haskell))
#+END_SRC
***** C/C++
#+BEGIN_SRC elisp
(use-package ob-C
  :straight org
  :commands
  (org-babel-execute:C
   org-babel-expand-body:C
   org-babel-execute:C++
   org-babel-expand-body:C++))
#+END_SRC
***** CANCELLED ob-async
#+BEGIN_SRC elisp :tangle no
(use-package ob-async
  :after org
  :defer t)
#+END_SRC
**** DONE Evil Org
#+begin_src elisp
(use-package evil-org
  :straight (:host github :repo "Somelauw/evil-org-mode" :branch "master" :files ("evil-org.el"))
  :after org
  :hook (org-mode . evil-org-mode)
  ;; :config
  ;; (use-package evil-org-agenda
  ;;   :defer t
  ;;   :hook (org-agenda-mode . (lambda () (evil-org-agenda-set-keys)))
  ;;   :straight (:host github :repo "Somelauw/evil-org-mode" :branch "master" :files ("evil-org-agenda.el"))
  ;;   :config
  ;;   (evil-org-agenda-set-keys))
  )
#+end_src
**** Org CalDav
***** Keybindings
#+begin_src elisp :tangle no
(defun jl/org-caldav-keybindings ()
  (jl/C-c-keys
   :keymaps 'org-agenda-mode-map
   "S" 'org-caldav-sync)
  )
#+end_src
***** Initialisation
#+begin_src elisp :tangle no
(use-package org-caldav
  :custom
  (org-caldav-url "https://posteo.de:8443/calendars/jamesleslie")
  (org-caldav-calendar-id "default")
  (org-caldav-inbox "~/Documents/Calendar/Agenda.org")
  (org-caldav-files '("~/Documents/Calendar/Appointments.org"))
  (org-icalendar-timezone "Europe/London")
  (org-caldav-delete-org-entries 'always)
  (org-caldav-delete-calendar-entries 'never)
  :init
  (jl/org-caldav-keybindings))
#+end_src
**** Org Present
#+BEGIN_SRC elisp
(use-package org-present
  :defer t
  :after org
  :straight (:host github
		   :repo "rlister/org-present"
		   :branch "master"
		   )
  )
#+END_SRC
**** Org Capture
#+begin_src elisp :tangle no
(with-eval-after-load 'org-capture
  (defun org-capture-start ()
    "Make sure that the keybindings are available for org capture."
    (jl/C-c-keys
      :keymaps 'org-capture-mode-map
      "a" 'org-capture-kill
      "c" 'org-capture-finalize
      "k" 'org-capture-kill
      "r" 'org-capture-refile)
    ;; Evil bindins seem not to be applied until at least one
    ;; Evil state is executed
    (evil-normal-state))
  ;; Must be done everytime we run org-capture otherwise it will
  ;; be ignored until insert mode is entered.
  (add-hook 'org-capture-mode-hook 'org-capture-start))
#+end_src
**** Table of Contents
#+BEGIN_SRC elisp
(use-package toc-org
  :defer t
  :after org
  :hook (org-mode . toc-org-mode)
  )
  #+END_SRC
**** Org Protocol
#+begin_src elisp :tangle no
(use-package org-protocol
  :defer 2
  :straight org)
#+end_src
**** Publish
#+begin_src elisp
(use-package ox-publish
  :defer t
  :after org
  :straight org)
#+end_src
**** org-cv
#+BEGIN_SRC elisp :tangle no
(use-package ox-altacv
  :after org
  :straight (:host github :repo "Titan-C/org-cv" :branch "master" :files ("ox-altacv.el" "org-cv-utils.el"))
  :config
  (defun make-cv ()
    "Makes a CV from the org file"
    (interactive)
    (org-export-to-file 'altacv "mycv.tex")
    (org-latex-compile "mycv.tex"))

  (jl/major-modes
    :keymaps 'org-mode-map
    :states '(normal visual operator)
    :major-modes t
    "ec" 'make-cv))
#+END_SRC
**** ox-extra
#+BEGIN_SRC elisp
(use-package ox-extra
  :after org
  :straight org-contrib
  :config
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+END_SRC
**** engrave faces
#+BEGIN_SRC elisp
(use-package engrave-faces
  :after org
  :config
  (setq org-latex-src-block-backend 'engraved))
#+END_SRC
*** LaTeX
**** Keybindings
#+begin_src elisp
(defun jl/auctex-keys ()
  (jl/major-modes
    :keymaps 'latex-mode-map
    :states '(normal visual motion)
    :major-modes t
    "xf" '(:ignore t :which-key "fonts")
    "f" '(:ignore t :which-key "fill")
    "h" '(:ignore t :which-key "help")
    "x" '(:ignore t :which-key "text/fonts")
    "z" '(:ignore t :which-key "fold")
    "i" '(:ignore t :which-key "insert")
    "p" '(:ignore t :which-key "preview")
    "r" '(:ignore t :which-key "reftex"))

  (jl/major-modes
    :keymaps 'LaTeX-mode-map
    :states '(normal visual motion)
    :major-modes t
    "\\"  'TeX-insert-macro                            ;; C-c C-m
    "-"   'TeX-recenter-output-buffer                  ;; C-c C-l
    "%"   'TeX-comment-or-uncomment-paragraph          ;; C-c %
    ";"   'comment-or-uncomment-region                 ;; C-c ; or C-c :
    ;; TeX-command-run-all runs compile and open the viewer
    "k"   'TeX-kill-job                                ;; C-c C-k
    "l"   'TeX-recenter-output-buffer                  ;; C-c C-l
    "m"   'TeX-insert-macro                            ;; C-c C-m
    "n"   'TeX-next-error                              ;; C-c `
    "N"   'TeX-previous-error                          ;; M-g p
    "v"   'TeX-view                                    ;; C-c C-v
    ;; TeX-doc is a very slow function
    "hd"  'TeX-doc
    "xb"  'latex/font-bold
    "xc"  'latex/font-code
    "xe"  'latex/font-emphasis
    "xi"  'latex/font-italic
    "xr"  'latex/font-clear
    "xo"  'latex/font-oblique
    "xfc" 'latex/font-small-caps
    "xff" 'latex/font-sans-serif
    "xfr" 'latex/font-serif

    "a"   'TeX-command-run-all                         ;; C-c C-a
    "b"   'latex/build

    "z=" 'TeX-fold-math
    "zb" 'TeX-fold-buffer
    "zB" 'TeX-fold-clearout-buffer
    "ze" 'TeX-fold-env
    "zI" 'TeX-fold-clearout-item
    "zm" 'TeX-fold-macro
    "zp" 'TeX-fold-paragraph
    "zP" 'TeX-fold-clearout-paragraph
    "zr" 'TeX-fold-region
    "zR" 'TeX-fold-clearout-region
    "zz" 'TeX-fold-dwim

    "*"   'LaTeX-mark-section      ;; C-c *
    "."   'LaTeX-mark-environment  ;; C-c .
    "ii"   'LaTeX-insert-item       ;; C-c C-j
    "s"   'LaTeX-section           ;; C-c C-s
    "fe"  'LaTeX-fill-environment  ;; C-c C-q C-e
    "fp"  'LaTeX-fill-paragraph    ;; C-c C-q C-p
    "fr"  'LaTeX-fill-region       ;; C-c C-q C-r
    "fs"  'LaTeX-fill-section      ;; C-c C-q C-s
    "pb"  'preview-buffer
    "pc"  'preview-clearout
    "pd"  'preview-document
    "pe"  'preview-environment
    "pf"  'preview-cache-preamble
    "pp"  'preview-at-point
    "pr"  'preview-region
    "ps"  'preview-section
    "xB"  'latex/font-medium
    "xr"  'latex/font-clear
    "xfa" 'latex/font-calligraphic
    "xfn" 'latex/font-normal
    "xfu" 'latex/font-upright

    "a"   'TeX-command-run-all
    "iC"   'org-ref-insert-cite-key
    "ic"   'LaTeX-close-environment
    "ie"   'LaTeX-environment

    "rc" 'reftex-citation
    "rg" 'reftex-grep-document
    "ri" 'reftex-index-selection-or-word
    "rI" 'reftex-display-index
    "rl" 'reftex-label
    "rp" 'reftex-index-phrase-selection-or-word
    "rr" 'reftex-reference
    "rs" 'reftex-search-document
    "rt" 'reftex-toc
    "rT" 'reftex-toc-recenter
    "rv" 'reftex-view-crossref))
#+end_src
**** Initialisation
#+begin_src elisp
(use-package tex
  :defer t
  :hook ((LaTeX-mode . outline-minor-mode)
	 (LaTeX-mode . visual-line-mode)
	 (LaTeX-mode . TeX-fold-mode)
	 (LaTeX-mode . LaTeX-math-mode)
	 (LaTeX-mode . TeX-source-correlate-mode)
	 (LaTeX-mode . TeX-PDF-mode)
         ;; (LaTeX-mode . (lambda () (variable-pitch-mode nil)))
         )
  :custom
  (TeX-parse-self t) ;; Enable Parse on load
  (TeX-auto-save t) ;;Enable Parse on save
  (TeX-engine 'luatex)
  (font-latex-math-environments (quote ("display" "displaymath" "equation" "eqnarray" "gather" "math" "multline" "align" "alignat" "xalignat" "xxalignat" "flalign" "tikzcd")))
  (reftex-plug-into-auctex t)
  (reftex-default-bibliography '("~/texmf/bibtex/bib/bibliography.bib"))
  (reftex-label-alist
   '(("theorem" ?h "thm:" "~\\ref{%s}" t   ("theorem" "th.") -3)
     ("proof"   ?g "pf:"  "~\\ref{%s}" t   ("proof" "pf.") -3)
     ("lemma"   ?l "lem:" "~\\ref{%s}" nil ("lemma"   "le.") -2)
     ("proposition" ?p "prp:" "~\\ref{%s}" t   ("proposition" "pr.") -3)
     ("corollary" ?c "cor:" "~\\ref{%s}" t   ("corollary" "co.") -3)
     ("example" ?a "ex:" "~\\ref{%s}" t   ("example" "ex.") -3)
     ("tcolorbox" ?b  "tcb:" "~\\ref{%s}" t   ("tcolorbox" "cb.") -3)
     ("tikzcd" ?j "cd:" "~\\ref{%s}" t  ("tikzcd" "cd.") -3)
     ("definition" ?d "def:" "~\\ref{%s}" t   ("definition" "de.") -3))
   )
  (TeX-view-program-selection '((output-pdf "Zathura")))
  (TeX-source-correlate-start-server t) ;; not sure if last line is neccessary
  :straight auctex
  :init
  (jl/auctex-keys)
  :config
  ;; Folding environments
  (defun latex-fold-env-all ()
    (interactive)
    (let ((env (read-from-minibuffer "Fold Environment: ")))
      (save-excursion
	(goto-char (point-min))
	(while (search-forward (format "begin{%s}" env) nil t)
	  (TeX-fold-env)))))

  ;;(add-hook 'LaTeX-mode-hook
  (lambda ()
    (LaTeX-add-environments
     '("theorem")
     '("proof")
     '("lemma")
     '("proposition")
     '("corollary")
     '("example")
     '("tcolorbox")
     '("tikzcd")
     '("definition")
     '("align*"))
    )
  )
  ;;; Functions
(defun latex/build ()
  (interactive)
  (progn
    (let ((TeX-save-query nil))
      (TeX-save-document (TeX-master-file)))
    (TeX-command latex-build-command 'TeX-master-file -1)))
;; (setq build-proc (TeX-command latex-build-command 'TeX-master-

(defun latex/auto-fill-mode ()
  "Toggle auto-fill-mode using the custom auto-fill function."
  (interactive)
  (auto-fill-mode)
  (setq auto-fill-function 'latex//autofill))

;; Rebindings for TeX-font
(defun latex/font-bold () (interactive) (TeX-font nil ?\C-b))
(defun latex/font-medium () (interactive) (TeX-font nil ?\C-m))
(defun latex/font-code () (interactive) (TeX-font nil ?\C-t))
(defun latex/font-emphasis () (interactive) (TeX-font nil ?\C-e))
(defun latex/font-italic () (interactive) (TeX-font nil ?\C-i))
(defun latex/font-clear () (interactive) (TeX-font nil ?\C-d))
(defun latex/font-calligraphic () (interactive) (TeX-font nil ?\C-a))
(defun latex/font-small-caps () (interactive) (TeX-font nil ?\C-c))
(defun latex/font-sans-serif () (interactive) (TeX-font nil ?\C-f))
(defun latex/font-normal () (interactive) (TeX-font nil ?\C-n))
(defun latex/font-serif () (interactive) (TeX-font nil ?\C-r))
(defun latex/font-oblique () (interactive) (TeX-font nil ?\C-s))
(defun latex/font-upright () (interactive) (TeX-font nil ?\C-u))
#+end_src
#+begin_src elisp
(use-package auctex-latexmk
  :defer t
  :config
  (auctex-latexmk-setup))
#+end_src
**** lsp-latex
#+BEGIN_SRC elisp
(use-package lsp-latex
  :defer t)
#+END_SRC
*** BibTex
**** Ivy-bibtex
#+begin_src elisp :tnagle no
(use-package ivy-bibtex
  :after (ivy bibtex)
  :defer t
  :general
  (jl/major-modes
    :keymaps 'bibtex-mode-map
    :states 'normal
    "m" 'ivy-bibtex))
#+end_src
**** Org Ref
***** Keybindings
#+BEGIN_SRC elisp
(defun jl/org-ref-keys ()
  (evil-define-key 'normal bibtex-mode-map
    (kbd "C-j") 'org-ref-bibtex-next-entry
    (kbd "C-k") 'org-ref-bibtex-previous-entry
    "gj" 'org-ref-bibtex-next-entry
    "gk" 'org-ref-bibtex-previous-entry)

  (jl/major-modes
    :keymaps 'bibtex-mode-map
    :states 'normal
    :major-modes t
    "l" '(:ignore t :which-key "lookup"))

  (jl/major-modes
    :keymaps 'bibtex-mode-map
    :states 'normal
    :major-modes t
    ;; Navigation
    "j" 'org-ref-bibtex-next-entry
    "k" 'org-ref-bibtex-previous-entry

    ;; Open
    "b" 'org-ref-open-in-browser
    "n" 'org-ref-open-bibtex-notes
    "p" 'org-ref-open-bibtex-pdf

    ;; Misc
    "h" 'org-ref-bibtex-hydra/body
    "i" 'org-ref-bibtex-hydra/org-ref-bibtex-new-entry/body-and-exit
    "s" 'org-ref-sort-bibtex-entry

    ;; Lookup utilities
    "la" 'arxiv-add-bibtex-entry
    "lA" 'arxiv-get-pdf-add-bibtex-entry
    "ld" 'doi-utils-add-bibtex-entry-from-doi
    "li" 'isbn-to-bibtex
    "lp" 'pubmed-insert-bibtex-from-pmid))
#+END_SRC
***** Initialisation
#+begin_src elisp
(use-package org-ref

  :after org
  :defer t
  :general
  (jl/major-modes
    :keymaps 'latex-mode-map
    :states 'normal
    "ic" 'org-ref-insert-link)

  (jl/major-modes
    :keymaps 'org-mode-map
    :states '(normal visual motion)
    :major-modes t
    "ir" 'org-ref-insert-ref-link
    "ic" 'org-ref-insert-cite-link)
  :custom
  (bibtex-completion-bibliography "~/texmf/bibtex/bib/bibliography.bib")
  (bibtex-completion-library-path "~/Documents/PDFs/")
  (org-latex-prefer-user-labels t)
  :config
  (jl/org-ref-keys))

(use-package org-ref-arxiv
  :straight org-ref
  :defer t)
#+end_src
**** Org Ref Ivy
#+begin_src elisp :tangle no
(use-package org-ref-ivy
  :commands (org-ref-insert-cite-link
	     org-ref-insert-ref-link)
  :straight org-ref
  :after (org ivy)
  :custom
  (org-ref-insert-link-function 'org-ref-insert-link-hydra/body)
  (org-ref-insert-cite-function 'org-ref-cite-insert-ivy)
  (org-ref-insert-label-function 'org-ref-insert-label-link)
  (org-ref-insert-ref-function 'org-ref-insert-ref-link)
  (org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
  )
  #+end_src
** Other
*** Yaml
#+BEGIN_SRC elisp
(use-package yaml-mode
  :hook (yaml-mode . (lambda () (variable-pitch-mode 0)))
  :defer t)
#+END_SRC
* DONE Readers
** Elfeed
*** Initialisation
#+begin_src elisp
(use-package elfeed
  :commands (elfeed)
  :general
  (jl/major-modes
    :keymaps 'elfeed-search-mode-map
    "c"  'elfeed-db-compact
    "gr" 'elfeed-update
    "gR" 'elfeed-search-update--force
    "gu" 'elfeed-unjam
    "o"  'elfeed-load-opml
    "q"  'quit-window
    "w"  'elfeed-web-start
    "W"  'elfeed-web-stop
    "+"  'elfeed-search-tag-all
    "-"  'elfeed-search-untag-all
    "b"  'elfeed-search-browse-url
    "y"  'elfeed-search-yank)
  (jl/major-modes
    :states 'normal
    :keymaps 'elfeed-show-mode-map
    "n" 'elfeed-show-next
    "p" 'elfeed-show-prev
    "v" 'elfeed-view-mpv)
  (jl/SPC-keys
    "are" 'elfeed)
  :custom
  (elfeed-feeds '(("https://golem.ph.utexas.edu/category/atom10.xml" mathematics cat-cafe)
        	  ("https://homotopytypetheory.org/feed.xml" mathematics hott)
        	  ("https://terrytao.wordpress.com/feed.xml" mathematics terry-tao)
        	  ("https://gowers.wordpress.com/feed.xml" mathematics timothy-gowers)
        	  ("https://bartoszmilewski.com/feed.xml" mathematics bartosz-milewski)
        	  ("http://logic-forall.blogspot.com/feeds/posts/default" mathematics)
        	  ("https://jeslie0.github.io/rss.xml" mathematics james-leslie)
                  ("https://www.mohabatmath.ca/feed.xml" mathematics mohabat-tarkeshian)
        	  ("https://xkcd.com/atom.xml" webcomic xkcd)
                  ("https://mmhaskell.com/blog/atom.xml" haskell mmm)
                  ("https://www.tweag.io/rss.xml" tweag)
                  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" youtube system-crafters) ;; System Crafters
                  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCG5h8yHSUS4n7zPnh0dG0SA" youtube georg-rockall-schmidt) ;; Georg Rockall-Schmidt
                  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxLYtICsUCWdr1YPrj5DtwA" youtube ordinary-things) ;; Ordinary Things
                  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnEuIogVV2Mv6Q1a3nHIRsQ" youtube carefree-wandering) ;; Carefree Wandering
                  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1D15p_vdP3HkrH8wgjQRw" youtube internet-historian) ;; Internet Historian
                  ))
  :config
  (defun elfeed-view-mpv ()
    "Watch a video from URL in MPV"
    (interactive)
    (async-shell-command (format "mpv %s" (thing-at-point-url-at-point)))))
#+end_src
*** Elfeed Goodies
This gives a nice view to Elfeed, but makes it hard to watch videos.
#+BEGIN_SRC elisp :tangle no
(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup))
#+END_SRC
*** Elfeed score
#+BEGIN_SRC elisp
(use-package elfeed-score
  :after elfeed
  :config
  (elfeed-score-enable))
#+END_SRC
** DONE Elpher
#+begin_src elisp
(use-package elpher
  :commands (elpher)
  ;; :hook (elpher-mode . variable-pitch-mode)
  :custom
  (elpher-bookmarks-file "~/.spacemacs.d/elpher-bookmarks")
  (elpher-start-page-url "gemini://gemini.circumlunar.space")
  :general
  (jl/SPC-keys
    "arg" 'elpher)

  (jl/major-modes
    :keymaps 'elpher-mode-map
    "TAB"       'elpher-next-link
    "<backtab>" 'elpher-prev-link
    "u" 'elpher-back
    "U" 'elpher-back-to-start
    "O" 'elpher-root-dir
    "g" 'elpher-go
    "o" 'elpher-go-current
    "t" '(org-latex-preview :which-key "view latex")
    "r" 'elpher-redraw
    "R" 'elpher-reload
    "T" 'elpher-toggle-tls
    "." 'elpher-view-raw
    "d" 'elpher-download
    "D" 'elpher-download-current
    "m" 'elpher-jump
    "i" 'elpher-info-link
    "I" 'elpher-info-current
    "c" 'elpher-copy-link-url
    "C" 'elpher-copy-current-url
    "a" 'elpher-bookmark-link
    "A" 'elpher-bookmark-current
    "x" 'elpher-unbookmark-link
    "X" 'elpher-unbookmark-current
    "B" 'elpher-bookmarks
    "S" 'elpher-set-gopher-coding-system
    "F" 'elpher-forget-current-certificate)
  :config
  (set-face-attribute 'elpher-gemini-heading1 nil :inherit 'org-level-1)
  (set-face-attribute 'elpher-gemini-heading2 nil :inherit 'org-level-2)
  (set-face-attribute 'elpher-gemini-heading3 nil :inherit 'org-level-2))
#+end_src
** DONE erc
*** Initialisation
#+begin_src elisp
(use-package erc
  :commands (erc
 	     erc-tls)
  :straight nil
  ;; :hook (erc-mode . erc-image-mode)
  :general
  (jl/SPC-keys
    "ari" 'erc-tls)
  (:states '(normal insert visual)
           :keymaps 'erc-mode-map
           "C-j" 'erc-next-command
           "C-k" 'erc-previous-command
           "C-l" 'erc-clear-input-ring)
  :custom
  (erc-server "irc.libera.chat")
  (erc-nick "KanFibration")
  (erc-port "6697")
  ;; (erc-prompt-for-password nil)
  (erc-user-full-name "James Leslie")
  (erc-track-shorten-start 8)
  (erc-autojoin-channels-alist '(("irc.libera.chat"
				  "#systemcrafters"
				  "#emacs"
				  "##math"
				  "#categorytheory"
				  "#haskell"
				  "#nyxt"
				  "#nixos")))
  (erc-kill-buffer-on-part t)
  (erc-auto-query 'bury)
  :init
  (setq erc-autojoin-channels-alist
        '(("irc.libera.chat"
	   "#systemcrafters"
	   "#emacs"
	   "##math"
	   "#categorytheory"
	   "#haskell"
	   "#nyxt"
	   "#nixos"))))
#+end_src
*** erc-hl-nicks
#+begin_src elisp
(use-package erc-hl-nicks
  :defer t
  :after (erc)
  :hook (erc-mode . erc-hl-nicks-mode))
#+end_src
*** erc-image
#+begin_src elisp :tangle no
(use-package erc-image
  :hook (erc-mode . erc-image-mode)
  :defer t
  :custom
  (erc-image-inline-rescale 400)
  :after erc)
#+end_src
** DONE ement.el
#+BEGIN_SRC elisp
(use-package plz
  :defer t
 :straight (:host github :repo "alphapapa/plz.el" :branch "master" :files ("*.el")))

(use-package ement
  :defer t
  :straight (:host github :repo "alphapapa/ement.el" :branch "master" :files ("*.el"))
  :commands (ement-connect)
  :general
  (jl/SPC-keys
    :modes '(normal visual operator)
    "arm" 'ement-connect))
#+END_SRC
** DONE EWW
#+begin_src elisp
(use-package eww
  :defer t
  :commands (eww)
  ;; :hook (eww-mode . variable-pitch-mode)
  :general
  (jl/major-modes
    :keymaps 'eww-mode-map
    :major-modes t
    "s" 'helm-google-suggest
    "S" 'browse-web
    "t" '(org-latex-preview :which-key "view latex")
    "r" 'eww-reload
    "p" 'eww-previous-url
    "n" 'eww-next-url
    "h" 'eww-list-histories
    "d" 'eww-download
    "a" 'eww-add-bookmark
    "lb" 'eww-list-buffers
    "lo" 'eww-list-bookmarks
    "vx" 'eww-browse-with-external-browser
    "vf" 'eww-toggle-fonts
    "vr" 'eww-readable
    "vs" 'eww-view-source)
  (jl/major-modes
    :keymaps 'eww-mode-map
    :major-modes t
    "v" '(:ignore t :which-key "view")
    "l" '(:ignore t :which-key "list"))
  (jl/SPC-keys
    "ate" 'eww)
  (:states 'normal :keymaps 'eww-mode-map
           (kbd "SPC") nil))
 #+end_src
** Mu4e
*** Keybindings
#+begin_src elisp
(defun jl/mu4e-keys ()
  (jl/major-modes
    :states '(normal visual emacs operator motion)
    :keymaps 'mu4e-compose-mode-map
    :major-modes '(mu4e-compose-mode)
    "," 'message-send-and-exit
    "c" 'message-send-and-exit
    "k" 'message-kill-buffer
    "a" 'message-kill-buffer
    "s" 'message-dont-send         ; saves as draft
    "e" 'mml-secure-message-encrypt-pgpmime
    "S" 'mml-secure-sign-pgpmime
    "f" 'mml-attach-file)

  (jl/major-modes
    :states '(normal visual emacs operator motion)
    :keymaps 'mu4e-headers-mode-map
    :major-modes t
    "c" '(:ignore t :which-key "compose")
    "m" '(:ignore t :which-key "marking")
    "C" 'mu4e-context-switch
    "s" 'mu4e-headers-search
    "O" 'mu4e-headers-change-sortting
    "U" 'mu4e-update-mail-and-index
    "x" 'mu4e-mark-execute-all
    "cr" 'mu4e-compose-reply
    "cf" 'mu4e-compose-forward
    "cc" 'mu4e-compose-new
    "ma" 'mu4e-headers-mark-for-action
    "md" 'mu4e-headers-mark-for-trash
    "m=" 'mu4e-headers-mark-for-untrash
    "mD" 'mu4e-headers-mark-for-delete
    "mR" 'mu4e-headers-mark-for-refile
    "mr" 'mu4e-headers-mark-for-read
    "mu" 'mu4e-headers-mark-for-unread
    "mf" 'mu4e-headers-mark-for-flag
    "mF" 'mu4e-headers-mark-for-unflag
    "mU" 'mu4e-headers-mark-for-unmark
    "m*" 'mu4e-headers-mark-for-something
)

  (jl/major-modes
    :states '(normal visual emacs operator motion)
    :keymaps 'mu4e-view-mode-map
    :major-modes t
    "t" '(:ignore t :which-key "toggle")
    "m" '(:ignore t :which-key "marking")
    "g" '(:ignore t :which-key "url")
    "a" '(:ignore t :which-key "attachments")
    )

  (jl/major-modes
    :states '(normal visual emacs operator motion)
    :keymaps 'mu4e-view-mode-map
    :major-modes t
    "md" 'mu4e-view-mark-for-trash
    "m=" 'mu4e-view-mark-for-untrash
    "mD" 'mu4e-view-mark-for-delete
    "mm" 'mu4e-view-mark-for-move
    "mr" 'mu4e-view-mark-for-refile
    "m+" 'mu4e-view-mark-for-flag
    "m-" 'mu4e-view-mark-for-unflag

    "mu" 'mu4e-view-unmark
    "mU" 'mu4e-view-unmark-all

    "m%" 'mu4e-view-mark-pattern
    "mT" 'mu4e-view-mark-thread
    "mt" 'mu4e-view-mark-subthread
    "m*" 'mu4e-view-mark-for-something
    ;; "m#" 'mu4e-view-mark-
    "mx" 'mu4e-view-marked-execute

    "R" 'mu4e-compose-reply
    "F" 'mu4e-compose-forward
    "C" 'mu4e-compose-new
    "E" 'mu4e-compose-edit

    "gX" 'mu4e-view-fetch-url
    "gx" 'mu4e-view-go-to-url

    "as" 'mu4e-view-save-attachments)

  (general-evil-define-key '(normal motion) 'mu4e-main-mode-map
    "j" 'mu4e~headers-jump-to-maildir))
#+end_src
*** Mail shortcuts
#+begin_src elisp
(defun jl/mu4e-shortcuts ()
  (setq mu4e-maildir-shortcuts '(("/Posteo/Inbox" . ?i)
				 ("/Posteo/Sent" . ?s)
				 ("/Posteo/Archive" . ?a)
				 ("/Posteo/University" . ?u)
				 ("/Posteo/Banking" . ?b)
				 ("/Posteo/Crypto" . ?c)
				 ("/Posteo/Friends and Family" . ?f)
				 ("/Posteo/Other" . ?O)
				 ("/Posteo/Important" . ?I))))
#+end_src
*** Mu4e contexts
#+begin_src elisp
(defun jl/mu4e-contexts ()
  ;; (setq mu4e-compose-signature "James Leslie") ;; Issue where signature is in the wrong position for email replies
  (setq mu4e-contexts
	`(
	  ;; ,(make-mu4e-context
          ;;    :name "personal - jamesleslie314@gmail.com"
          ;;    :match-func (lambda (msg)
          ;;                  (when msg
          ;;                    (mu4e-message-contact-field-matches msg
	  ;; 							 :to "jamesleslie314@gmail.com")))
          ;;    :vars '(
          ;;            (mu4e-sent-messages-behavior . sent)
          ;;            (mu4e-sent-folder . "/Gmail/[Gmail]/Sent Mail")
          ;;            (mu4e-drafts-folder . "/Gmail/[Gmail]/Drafts")
          ;;            (mu4e-trash-folder . "/Gmail/[Gmail]/Trash")
          ;;            (mu4e-refile-folder . "/Gmail/[Gmail]/All Mail")
          ;;            (user-mail-address . "jamesleslie314@gmail.com")
          ;;            (user-full-name . "James Leslie")

          ;;            ;; SMTP configuration
          ;;            (smtpmail-smtp-user . "jamesleslie314@gmail.com")
          ;;            (smtpmail-default-smtp-server . "smtp.gmail.com")
          ;;            (smtpmail-smtp-server . "smtp.gmail.com")
          ;;            (smtpmail-smtp-service . 587)
          ;;            )
          ;;    )
          ,(make-mu4e-context
            :name "Posteo - jamesleslie@posteo.net"
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches msg
                                                                :to "jamesleslie@posteo.net")))
            :vars '(
                    (mu4e-sent-messages-behavior . sent)
                    (mu4e-sent-folder . "/Posteo/Sent")
                    (mu4e-drafts-folder . "/Posteo/Drafts")
                    (mu4e-trash-folder . "/Posteo/Trash")
                    (mu4e-refile-folder . "/Posteo/Archive")
                    (user-full-name . "James Leslie")
                    (user-mail-address . "jamesleslie@posteo.net")

                    ;; SMTP configuration
                    (smtpmail-smtp-user . "jamesleslie@posteo.net")
                    (smtpmail-default-smtp-server . "posteo.de")
                    (smtpmail-smtp-server . "posteo.de")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)))

          ,(make-mu4e-context
            :name "Apps - jamesleslieapps@posteo.net"
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches msg
                                                                :to "jamesleslieapps@posteo.net")))
            :vars '(
                    (mu4e-sent-messages-behavior . sent)
                    (mu4e-sent-folder . "/Posteo/Sent")
                    (mu4e-drafts-folder . "/Posteo/Drafts")
                    (mu4e-trash-folder . "/Posteo/Trash")
                    (mu4e-refile-folder . "/Posteo/Archive")
                    (user-full-name . "James Leslie")
                    (user-mail-address . "jamesleslieapps@posteo.net")

                    ;; SMTP configuration
                    (smtpmail-smtp-user . "jamesleslie@posteo.net")
                    (smtpmail-default-smtp-server . "posteo.de")
                    (smtpmail-smtp-server . "posteo.de")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-service . 465)))))

  (setq mu4e-context-policy 'pick-first)

  ;; Parse each context and gather a list of their `user-mail-address'es
  (setq mu4e-user-mail-address-list
	(mapcar (lambda (context)
                  (let ((vars (mu4e-context-vars context)))
                    (cdr (assq 'user-mail-address vars))))
		mu4e-contexts))
  )
#+end_src
*** Mu4e Rich text view
#+begin_src elisp
(defun jl/mu4e-rich ()
  (setq
   ;; mu4e-html2text-command 'mu4e-shr2text
   mu4e-html2text-command "w3m -dump -T text/html -o display_link_number=true"
   mu4e-view-show-images t
   mu4e-image-max-width 800
   ;; mu4e-view-prefer-html t
   mu4e-use-fancy-chars t))
#+end_src
*** Mu4e attachement warning
#+begin_src elisp
(defun jl/mu4e-attachement-warning ()
  (defun mbork/message-attachment-present-p ()
    "Return t if an attachment is found in the current message."
    (save-excursion
      (save-restriction
	(widen)
	(goto-char (point-min))
	(when (search-forward "<#part" nil t) t))))

  (defcustom mbork/message-attachment-intent-re
    (regexp-opt '("I attach"
		  "I have attached"
		  "I've attached"
		  "I have included"
		  "I've included"
		  "see the attached"
		  "see the attachment"
		  "attached file"
		  "Attached"))
    "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

  (defcustom mbork/message-attachment-reminder
    "Are you sure you want to send this message without any attachment? "
    "The default question asked when trying to send a message
containing `mbork/message-attachment-intent-re' without an
actual attachment.")

  (defun mbork/message-warn-if-no-attachments ()
    "Ask the user if s?he wants to send the message even though
there are no attachments."
    (when (and (save-excursion
		 (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (re-search-forward mbork/message-attachment-intent-re nil t)))
	       (not (mbork/message-attachment-present-p)))
      (unless (y-or-n-p mbork/message-attachment-reminder)
	(keyboard-quit))))

  (add-hook 'message-send-hook #'mbork/message-warn-if-no-attachments)
  )
#+end_src
*** Mu4e reply quote
#+begin_src elisp
(defun jl/mu4e-reply-quote ()
  ;; customize the reply-quote-string
  (setq message-citation-line-format "On %a, %d %b, %Y at %R %f wrote:\n")
  ;; choose to use the formatted string
  (setq message-citation-line-function 'message-insert-formatted-citation-line))
#+end_src
*** Mu4e thread folding
#+begin_src elisp
(use-package mu4e-thread-folding
  :defer t
  :after mu4e
  :straight (:host github :repo "rougier/mu4e-thread-folding" :branch "master" :files ("*.el"))
  :hook (mu4e-headers-mode . mu4e-thread-folding-mode)
  :custom
  (mu4e-headers-found-hook '(mu4e-headers-mark-threads mu4e-headers-fold-all))
  (mu4e-headers-fields '((:empty         .    2)
                         (:human-date    .   12)
                         (:flags         .    6)
                         (:mailing-list  .   10)
                         (:from          .   22)
                         (:subject       .   nil)))
  :config
  (add-to-list 'mu4e-header-info-custom
               '(:empty . (:name "Empty"
				 :shortname ""
				 :function (lambda (msg) "  "))))
  (define-key mu4e-headers-mode-map (kbd "<tab>")     'mu4e-headers-toggle-at-point)
  (define-key mu4e-headers-mode-map (kbd "<left>")    'mu4e-headers-fold-at-point)
  (define-key mu4e-headers-mode-map (kbd "<S-left>")  'mu4e-headers-fold-all)
  (define-key mu4e-headers-mode-map (kbd "<right>")   'mu4e-headers-unfold-at-point)
  (define-key mu4e-headers-mode-map (kbd "<S-right>") 'mu4e-headers-unfold-all))
#+end_src
*** Mu4e PGP
#+begin_src elisp
(defun jl/mu4e-pgp ()
  ;; (setq mml-secure-openpgp-sign-with-sender t) ;; Sign all outgoing emails
  (setq mml-secure-openpgp-signers '("86AC9FE03B59F914725208DECF6607D8EB302630"
                                     ;; "7BC253447F901C3EBD46AB5EDDFB27273B2BFBB6" ;; Old key
                                     )) ;; Sign emails with this key
  (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign))
#+end_src
*** Initialisation
#+begin_src elisp
(use-package mu4e
  :commands mu4e
  :general
  (jl/C-c-keys
    "e" 'mu4e)
  (jl/SPC-keys
    "ae" 'mu4e)
  :straight nil
  :hook ((mu4e-compose-mode . visual-fill-column-mode)
	 ;; (mu4e-compose-mode . variable-pitch-mode)
	 (mu4e-view-mode . visual-fill-column-mode))
  :config
  (jl/mu4e-keys)
  (jl/mu4e-shortcuts)
  (jl/mu4e-contexts)
  (jl/mu4e-rich)
  (jl/mu4e-attachement-warning)
  (jl/mu4e-reply-quote)
  (jl/mu4e-pgp)
  :custom
  (mu4e-maildir "~/.email")
  (mu4e-get-mail-command "mbsync -c ~/.config/mbsync/.mbsyncrc -a")
  (mu4e-compose-signature-auto-include nil)
  (mu4e-view-show-addresses t)
  (mu4e-headers-include-related nil)
  (mu4e-headers-skip-duplicates t)
  (mu4e-headers-auto-update t)
  (mu4e-update-interval 300)
  (message-send-mail-function 'smtpmail-send-it)
  (mu4e-attachment-dir "~/Downloads/")
  (mu4e-change-filenames-when-moving t)
  (mu4e-compose-format-flowed t)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-sent-messages-behavior 'sent)
  (mu4e-use-fancy-chars t)
  (mu4e-display-update-status-in-modeline nil))
  #+end_src
*** mu4e-alert
#+begin_src elisp :tangle no
(use-package mu4e-alert
  :hook (after-init . mu4e-alert-enable-mode-line-display))
#+end_src
*** org-mime
#+BEGIN_SRC elisp
(use-package org-mime
  :defer t
  :commands (org-mime-edit-mail-in-org-mode
             org-mime-htmlize
             org-mime-org-buffer-htmlize
             org-mime-subtree-htmlize)
  :init
  (jl/major-modes
    :keymaps 'mu4e-compose-mode-map
    :states '(normal operator visual)
    :major-modes t
    "h" '(:ignore t :which-key "html")
    "ho" 'org-mime-edit-mail-in-org-mode
    "hh" 'org-mime-htmlize))
#+END_SRC
* DONE Avy
#+begin_src elisp
(use-package avy
  :custom
  (avy-background t)
  :commands
  (avy-pop-mark
   evil-avy-goto-char-timer
   evil-avy-goto-line
   evil-avy-goto-word-or-subword-1
   avy-goto-url
   avy-open-url)
  :general
  (:states '(normal visual motion)
           "f" 'evil-avy-goto-char-timer)
  (jl/SPC-keys
    "jb" 'avy-pop-mark
    "jj" 'evil-avy-goto-char-timer
    "jl" 'evil-avy-goto-line
    "jw" 'evil-avy-goto-word-or-subword-1
    "ju" 'avy-goto-url
    "jU" 'avy-open-url)
  :config
  (defun avy-goto-url ()
    "Use avy to go to an URL in the buffer."
    (interactive)
    (avy-jump "https?://"))
  (defun avy-open-url ()
    "Use avy to select an URL in the buffer and open it."
    (interactive)
    (save-excursion
      (avy-goto-url)
      (browse-url-at-point))))
#+end_src
* DONE Auto-complete and spelling
#+BEGIN_SRC elisp
(use-package ispell)
#+END_SRC
** DONE Yasnippet
#+begin_src elisp
(use-package yasnippet
  :hook ((prog-mode text-mode) . yas-minor-mode)
  :defer t
  :config
  (yas-global-mode 1))

(use-package consult-yasnippet
  :commands consult-yasnippet
  :general
  (jl/SPC-keys
    "is" 'consult-yasnippet))

(use-package yasnippet-snippets
  :defer t
  :after yasnippet)

;; (use-package ivy-yasnippet
;;   :defer t
;;   :after yasnippet)

(use-package haskell-snippets
  :defer t
  :after yasnippet)

(use-package yatemplate
  :defer t
  :after yasnippet)
#+end_src
** DONE Company mode
*** Initialisation
#+begin_src elisp :tangle no
(use-package company
  :defer t
  :hook ((prog-mode text-mode) . company-mode)
  :config
  (global-company-mode 1)
  )
#+end_src
*** Prescient company
#+BEGIN_SRC elisp :tangle no
(use-package company-prescient
  :after company
  :config
  (company-prescient-mode 1)
  )
#+END_SRC
*** Company-shell
#+BEGIN_SRC elisp :tangle no
(use-package company-shell
  :defer t
  :after sh
  :config
  (add-to-list 'company-backends 'company-shell)
  )
#+END_SRC
** DONE Corfu
*** Initialisation
#+BEGIN_SRC elisp
(use-package corfu
  :general
  (:keymaps 'corfu-map
            "TAB" 'corfu-next
            [tab] 'corfu-next
            "C-j" 'corfu-next
            "S-TAB" 'corfu-previous
            [backtab] 'corfu-previous
            "C-k" 'corfu-previous
            [escape] 'jl/corfu-quit
            )
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary t)     ;; Quit at completion boundary
  (corfu-quit-no-match t)        ;; Quit if there is no match
  (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect-first t)      ;; Enable candidate preselection
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; Works with `indent-for-tab-command'. Make sure tab doesn't indent when you
  ;; want to perform completion
  (tab-always-indent 'complete)

  ;; You may want to enable Corfu only for certain modes.
  :hook ((prog-mode . corfu-mode)
         (text-mode . corfu-mode)
         (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (defun jl/corfu-quit ()
    (interactive)
    (corfu-quit)
    (evil-normal-state))
  :config
  (global-corfu-mode)

  (general-define-key :keymaps 'corfu-map
                      :states 'insert
                      [escape] 'jl/corfu-quit))
#+END_SRC
*** kind-icon
#+BEGIN_SRC elisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC
*** corfu-doc
#+BEGIN_SRC elisp :tangle no
(use-package corfu-doc
  ;; NOTE 2022-02-05: At the time of writing, `corfu-doc' is not yet on melpa
  :straight (corfu-doc :type git :host github :repo "galeo/corfu-doc")
  :after corfu
  :hook (corfu-mode . corfu-doc-mode)
  :custom
  (corfu-doc-delay 1.5)
  (corfu-doc-max-width 70)
  (corfu-doc-max-height 20)

  ;; NOTE 2022-02-05: I've also set this in the `corfu' use-package to be
  ;; extra-safe that this is set when corfu-doc is loaded. I do not want
  ;; documentation shown in both the echo area and in the `corfu-doc' popup.
  (corfu-echo-documentation nil))
#+END_SRC
*** cape
#+BEGIN_SRC elisp
(use-package cape
  :after corfu
  :config
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  )
#+END_SRC
** DONE Flycheck
#+begin_src elisp
(use-package flycheck
  :defer t
  :hook ((prog-mode text-mode) . flycheck-mode)
  :config
  (global-flycheck-mode t))
#+end_src
*** Bashate
#+BEGIN_SRC elisp
(use-package flycheck-bashate
  :defer t
  :hook (sh-mode . flycheck-bashate-setup))
#+END_SRC
** DONE Flyspell
*** Initialisation
#+begin_src elisp :tangle no
(use-package flyspell
  :defer t
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode)
  :general
  (jl/SPC-keys
    "sab" 'add-word-to-dict-buffer
    "sag" 'add-word-to-dict-global
    "sas" 'add-word-to-dict-session
    "sb" 'flyspell-buffer
    "sr" 'flyspell-region
    "sd" 'spell-checking/change-dictionary
    "sn" 'flyspell-goto-next-error
    "ss" 'flyspell-correct-at-point)
  (jl/SPC-keys
    "sa" '(:ignore t :which-key "add word to dict"))
  :custom
  (ispell-dictionary "en_GB")
  :config
  (defun spell-checking/add-flyspell-hook (hook)
    "Add `flyspell-mode' to the given HOOK, if
`spell-checking-enable-by-default' is true."
    (when spell-checking-enable-by-default
      (add-hook hook 'flyspell-mode)))

  (defun spell-checking/change-dictionary ()
    "Change the dictionary. Use the ispell version if
auto-dictionary is not used, use the adict version otherwise."
    (interactive)
    (if (fboundp 'adict-change-dictionary)
        (adict-change-dictionary)
      (call-interactively 'ispell-change-dictionary)))

  (defun add-word-to-dict-buffer ()
    "Save word at point as correct in current buffer."
    (interactive)
    (add-word-to-dict 'buffer))

  (defun add-word-to-dict-global ()
    "Save word at point as a correct word globally."
    (interactive)
    (add-word-to-dict 'save))

  (defun add-word-to-dict-session ()
    "Save word at point as correct in current session."
    (interactive)
    (add-word-to-dict 'session))

  (defun add-word-to-dict (scope)
    "Save word at point as a correct word.
SCOPE can be:
`save' to save globally,
`session' to save in current session or
`buffer' for buffer local."
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (if (spacemacs//word-in-dict-p (car word))
            (error "%s is already in dictionary" (car word))
          (progn
            (flyspell-do-correct scope nil (car word) current-location
                                 (cadr word) (caddr word) current-location)
            (ispell-pdict-save t))))))

  (defun spacemacs//word-in-dict-p (word)
    "Check if WORD is defined in any of the active dictionaries."
    ;; use the correct dictionary
    (flyspell-accept-buffer-local-defs)
    (let (poss ispell-filter)
      ;; now check spelling of word.
      (ispell-send-string "%\n")	;put in verbose mode
      (ispell-send-string (concat "^" word "\n"))
      ;; wait until ispell has processed word
      (while (progn
               (accept-process-output ispell-process)
               (not (string= "" (car ispell-filter)))))
      ;; Remove leading empty element
      (setq ispell-filter (cdr ispell-filter))
      ;; ispell process should return something after word is sent.
      ;; Tag word as valid (i.e., skip) otherwise
      (or ispell-filter
          (setq ispell-filter '(*)))
      (if (consp ispell-filter)
          (setq poss (ispell-parse-output (car ispell-filter))))
      (or (eq poss t) (stringp poss)))))
#+end_src
*** consult-flyspell
#+begin_src elisp :tangle no
(use-package consult-flyspell
  :straight (consult-flyspell :type git :host gitlab :repo "OlMon/consult-flyspell" :branch "master")
  :after (flyspell consult)
  :config
  ;; default settings
  (setq consult-flyspell-select-function nil
        consult-flyspell-set-point-after-word t
        consult-flyspell-always-check-buffer nil))
#+end_src
** DONE Flyspell correct
#+begin_src elisp
(use-package flyspell-correct
  :after (:any flyspell spell-fu)
  :general
  (:keymaps 'flyspell-mode-map
            "C-;"  'flyspell-correct-wrapper)
  :config
  (ispell-set-spellchecker-params))
#+end_src
** DONE Spell-fu
#+BEGIN_SRC elisp
(use-package spell-fu
  :hook ((prog-mode text-mode) . spell-fu-mode)
  :general
  (jl/SPC-keys
    "s" '(:ignore t :which-key "spelling")
    "sa" 'spell-fu-word-add
    "sb" 'spell-fu-buffer
    "sn" 'spell-fu-goto-next-error
    "sp" 'spell-fu-goto-previous-error
    "sr" 'spell-fu-word-remove
    ;; "ss" 'ispell-word
    "ss" 'flyspell-correct-at-point)
  :init
  (setq ispell-dictionary "en_GB"
        ispell-personal-dictionary "~/.aspell.en.pws"
        ispell-grep-command "rg"
        ispell-use-framepop-p nil
        spell-fu-faces-exclude '(org-block-begin-line org-block-end-line org-block org-code org-date org-drawer org-document-info-keyword org-ellipsis org-link org-meta-line org-properties org-properties-value org-special-keyword org-src org-tag org-verbatim)))
#+END_SRC
* DONE Tools
** Undo Tree
#+begin_src elisp
(use-package undo-tree
  :hook ((prog-mode text-mode) . undo-tree-mode)
  :commands (undo-tree-visualize)
  :general
  (:states '(normal motion)
           :keymaps 'undo-tree-visualizer-mode-map
           "j"  'undo-tree-visualize-redo
           "k"  'undo-tree-visualize-undo
           "h"  'undo-tree-visualize-switch-branch-left
           "l"  'undo-tree-visualize-switch-branch-right)
  (jl/SPC-keys
    "au" 'undo-tree-visualize)
  (:states 'normal
   "p" 'counsel-yank-pop
   "C-r" 'undo-tree-redo
   "u" 'undo-tree-undo)
  :custom
  (undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undotree/")))
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  ;; 10X bump of the undo limits to avoid issues with premature
  ;; Emacs GC which truncages the undo history very aggresively
  (undo-limit 800000)
  (undo-strong-limit 12000000)
  (undo-outer-limit 120000000)
  :config
  (global-undo-tree-mode))
#+end_src
** Pandoc
#+begin_src elisp
(use-package pandoc-mode
  :commands (pandoc-main-hydra/body)
  :defer t
  :general
  (jl/SPC-keys
    "P" '(pandoc-main-hydra/body :which-key "Pandoc")))
#+end_src
** Iedit
*** Initialisation
#+begin_src elisp
(use-package evil-iedit-state
  :defer t
  :general
  (jl/SPC-keys
    "Se" 'iedit-mode))
#+end_src
*** wgrep
#+BEGIN_SRC elisp
(use-package wgrep
  :defer t)
#+END_SRC
** Simple httpd
#+BEGIN_SRC elisp
(use-package simple-httpd
  :defer t
  :commands (httpd-serve-directory))
#+END_SRC
** Define word
#+BEGIN_SRC elisp
(use-package define-word
  :defer t
  :commands (define-word define-word-at-point))
#+END_SRC
** Pair Programming
#+BEGIN_SRC elisp
(use-package floobits
  :defer t)
#+END_SRC
** edit-server
#+BEGIN_SRC elisp
(use-package edit-server
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  ;; :config (setq edit-server-new-frame-alist
  ;;               '((name . "Edit with Emacs FRAME")
  ;;                 (top . 200)
  ;;                 (left . 200)
  ;;                 (width . 80)
  ;;                 (height . 25)
  ;;                 (minibuffer . t)
  ;;                 (menu-bar-lines . t)
  ;;                 (window-system . x)))
)
#+END_SRC
** esup
#+BEGIN_SRC elisp
(use-package esup
  :commands (esup)
  :config
  (setq esup-depth 0))
#+END_SRC
** openwith
#+BEGIN_SRC elisp
(use-package openwith
  :after (dired vertico)
  :config
  (setq openwith-associations '(("\\.pdf\\'" "zathura" (file))
                                ))

  (openwith-mode))

(use-package mm-util
  :straight gnus
  :config
  (add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler))
#+END_SRC
* DONE Shells
** Term
#+BEGIN_SRC elisp
(use-package term
  :commands (term)
  :defer t
  :custom
  (explicit-shell-file-name "fish") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+END_SRC
*** eterm 256colours
#+BEGIN_SRC elisp
(use-package eterm-256color
  :defer t
  :after term
  :hook (term-mode . eterm-256color-mode))
#+END_SRC
** Vterm
#+BEGIN_SRC elisp
(use-package vterm
  :defer t
  :straight nil
  :commands vterm
  :custom
  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  (vterm-max-scrollback 10000))

(use-package eshell-vterm
  :defer t
  :after eshell
  :init
  (defalias 'eshell/v 'eshell-exec-visual)
  :config
  (eshell-vterm-mode))
#+END_SRC
** Eshell
*** Keybindings
#+BEGIN_SRC elisp
(defun jl/eshell-global-keys ()
  )
#+END_SRC
*** Initialisation
#+BEGIN_SRC elisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq
   eshell-history-size         10000
   eshell-buffer-maximum-lines 10000
   eshell-hist-ignoredups t
   eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :defer t)


(use-package eshell
  :commands (eshell)
  :defer t
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :general
  (jl/SPC-keys
    "ase" 'eshell)
  (:keymaps 'eshell-mode-map
            "C-j" 'eshell-next-matching-input-from-input
            "C-k" 'eshell-previous-matching-input-from-input)
  :config
  (defalias 'eshell/d 'dired)

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim" "nmtui")))

  (eshell-git-prompt-use-theme 'powerline))
    #+END_SRC
*** eshell-did-you-mean
#+BEGIN_SRC elisp
(use-package eshell-did-you-mean
  :straight (:host github :repo "xuchunyang/eshell-did-you-mean" :branch "master" :files ("*.el"))
  :after eshell
  :config
  (eshell-did-you-mean-setup))
#+END_SRC
*** esh-help
#+BEGIN_SRC elisp
(use-package esh-help
  :after eshell
  :hook (eshell-mode . eldoc-mode)
  :config
  (setup-esh-help-eldoc))
#+END_SRC
*** eshell-syntax-highlighting
#+BEGIN_SRC elisp
(use-package eshell-syntax-highlighting
  :after eshell
  :config
  (eshell-syntax-highlighting-global-mode +1))
#+END_SRC
*** emacs-fish-completion
#+BEGIN_SRC elisp
(use-package fish-completion
  :hook (eshell-mode . fish-completion-mode)
  :custom
  (fish-completion-fallback-on-bash-p t)
  :after eshell
  :config
  (global-fish-completion-mode))
#+END_SRC
* TODO Fun
** Snow
#+BEGIN_SRC elisp :tangle no
(use-package snow
  :defer t
  :commands (snow))
#+END_SRC
** Fireplace
#+BEGIN_SRC elisp :tangle no
(use-package fireplace
  :defer t
  :commands (fireplace))
#+END_SRC
* TODO Direnv
** direnv
#+BEGIN_SRC elisp :tangle no
(use-package direnv
  :defer .1
  :general
  (jl/SPC-keys
    "d"  '(:ignore t :which-key "direnv")
    "da" 'direnv-allow
    "du" 'direnv-update-environment
    "dU" 'direnv-update-directory-environment)
  :config
  (direnv-mode)
  :custom
  (direnv-always-show-summary nil))
#+END_SRC
** envrc
#+BEGIN_SRC elisp
(use-package envrc
  :defer .1
  :general
  (jl/SPC-keys
    "d"  '(:ignore t :which-key "direnv")
    "da" 'envrc-allow
    "dd" 'envrc-deny
    "dg" 'envrc-global-mode
    "dr" 'envrc-reload
    "dR" 'envrc-reload-all)
  :config
  (envrc-global-mode))
#+END_SRC
